// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Filled cart component tests should match snapshot 1`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <CartItem
      calcPrice={[Function]}
      cartQuantityLoading={false}
      currency={0}
      item={
        Object {
          "allSizes": Array [
            Object {
              "size": Object {
                "_id": "some id",
                "name": "some name",
              },
            },
          ],
          "options": Object {
            "size": Object {
              "_id": "some id",
            },
          },
          "price": Array [
            Object {
              "currency": "ua",
              "value": 100,
            },
          ],
          "product": Object {
            "_id": "some id",
            "images": Object {
              "primary": Object {
                "thumbnail": "/img",
              },
            },
            "name": Array [
              Object {
                "value": "ua",
              },
            ],
          },
          "quantity": 1,
        }
      }
      language={0}
      setModalItem={[Function]}
      setModalVisibility={[Function]}
      user={Object {}}
    >
      <WithStyles(ForwardRef(TableRow))
        classes={
          Object {
            "root": "makeStyles-root-1",
          }
        }
        data-cy="cart-item"
      >
        <ForwardRef(TableRow)
          classes={
            Object {
              "footer": "MuiTableRow-footer",
              "head": "MuiTableRow-head",
              "hover": "MuiTableRow-hover",
              "root": "MuiTableRow-root makeStyles-root-1",
              "selected": "Mui-selected",
            }
          }
          data-cy="cart-item"
        >
          <tr
            className="MuiTableRow-root makeStyles-root-1"
            data-cy="cart-item"
            role={null}
          >
            <WithStyles(ForwardRef(TableCell))
              classes={
                Object {
                  "root": "makeStyles-product-8",
                }
              }
              data-cy="cart-item-img"
            >
              <ForwardRef(TableCell)
                classes={
                  Object {
                    "alignCenter": "MuiTableCell-alignCenter",
                    "alignJustify": "MuiTableCell-alignJustify",
                    "alignLeft": "MuiTableCell-alignLeft",
                    "alignRight": "MuiTableCell-alignRight",
                    "body": "MuiTableCell-body",
                    "footer": "MuiTableCell-footer",
                    "head": "MuiTableCell-head",
                    "paddingCheckbox": "MuiTableCell-paddingCheckbox",
                    "paddingNone": "MuiTableCell-paddingNone",
                    "root": "MuiTableCell-root makeStyles-product-8",
                    "sizeSmall": "MuiTableCell-sizeSmall",
                    "stickyHeader": "MuiTableCell-stickyHeader",
                  }
                }
                data-cy="cart-item-img"
              >
                <td
                  aria-sort={null}
                  className="MuiTableCell-root makeStyles-product-8"
                  data-cy="cart-item-img"
                >
                  <Link
                    to="/product/some id"
                  >
                    <LinkAnchor
                      href="/product/some id"
                      navigate={[Function]}
                    >
                      <a
                        href="/product/some id"
                        onClick={[Function]}
                      >
                        <img
                          alt="product-img"
                          className="makeStyles-itemImg-15"
                          src="https://horondi.blob.core.windows.net/horondi/images//img "
                        />
                      </a>
                    </LinkAnchor>
                  </Link>
                  <div>
                    <Link
                      to="/product/some id"
                    >
                      <LinkAnchor
                        href="/product/some id"
                        navigate={[Function]}
                      >
                        <a
                          href="/product/some id"
                          onClick={[Function]}
                        >
                          <span
                            className="makeStyles-lightThemeItemName-5"
                          >
                            ua
                          </span>
                        </a>
                      </LinkAnchor>
                    </Link>
                  </div>
                </td>
              </ForwardRef(TableCell)>
            </WithStyles(ForwardRef(TableCell))>
            <WithStyles(ForwardRef(TableCell))
              classes={
                Object {
                  "root": "makeStyles-description-2",
                }
              }
              data-cy="cart-item-description"
            >
              <ForwardRef(TableCell)
                classes={
                  Object {
                    "alignCenter": "MuiTableCell-alignCenter",
                    "alignJustify": "MuiTableCell-alignJustify",
                    "alignLeft": "MuiTableCell-alignLeft",
                    "alignRight": "MuiTableCell-alignRight",
                    "body": "MuiTableCell-body",
                    "footer": "MuiTableCell-footer",
                    "head": "MuiTableCell-head",
                    "paddingCheckbox": "MuiTableCell-paddingCheckbox",
                    "paddingNone": "MuiTableCell-paddingNone",
                    "root": "MuiTableCell-root makeStyles-description-2",
                    "sizeSmall": "MuiTableCell-sizeSmall",
                    "stickyHeader": "MuiTableCell-stickyHeader",
                  }
                }
                data-cy="cart-item-description"
              >
                <td
                  aria-sort={null}
                  className="MuiTableCell-root makeStyles-description-2"
                  data-cy="cart-item-description"
                >
                  <WithStyles(ForwardRef(Select))
                    className="makeStyles-lightThemeSelectSizeStyle-10"
                    data-cy="size"
                    disablePortal={true}
                    label="title"
                    name="size"
                    onChange={[Function]}
                    value="some id"
                  >
                    <ForwardRef(Select)
                      className="makeStyles-lightThemeSelectSizeStyle-10"
                      classes={
                        Object {
                          "disabled": "Mui-disabled",
                          "filled": "MuiSelect-filled",
                          "icon": "MuiSelect-icon",
                          "iconFilled": "MuiSelect-iconFilled",
                          "iconOpen": "MuiSelect-iconOpen",
                          "iconOutlined": "MuiSelect-iconOutlined",
                          "nativeInput": "MuiSelect-nativeInput",
                          "outlined": "MuiSelect-outlined",
                          "root": "MuiSelect-root",
                          "select": "MuiSelect-select",
                          "selectMenu": "MuiSelect-selectMenu",
                        }
                      }
                      data-cy="size"
                      disablePortal={true}
                      label="title"
                      name="size"
                      onChange={[Function]}
                      value="some id"
                    >
                      <WithStyles(ForwardRef(Input))
                        className="makeStyles-lightThemeSelectSizeStyle-10"
                        data-cy="size"
                        disablePortal={true}
                        inputComponent={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "propTypes": Object {
                              "IconComponent": [Function],
                              "MenuProps": [Function],
                              "SelectDisplayProps": [Function],
                              "aria-label": [Function],
                              "autoFocus": [Function],
                              "autoWidth": [Function],
                              "children": [Function],
                              "className": [Function],
                              "classes": [Function],
                              "defaultValue": [Function],
                              "disabled": [Function],
                              "displayEmpty": [Function],
                              "inputRef": [Function],
                              "labelId": [Function],
                              "multiple": [Function],
                              "name": [Function],
                              "onBlur": [Function],
                              "onChange": [Function],
                              "onClose": [Function],
                              "onFocus": [Function],
                              "onOpen": [Function],
                              "open": [Function],
                              "readOnly": [Function],
                              "renderValue": [Function],
                              "tabIndex": [Function],
                              "type": [Function],
                              "value": [Function],
                              "variant": [Function],
                            },
                            "render": [Function],
                          }
                        }
                        inputProps={
                          Object {
                            "IconComponent": Object {
                              "$$typeof": Symbol(react.memo),
                              "compare": null,
                              "type": Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "render": [Function],
                              },
                            },
                            "MenuProps": undefined,
                            "SelectDisplayProps": Object {
                              "id": undefined,
                            },
                            "autoWidth": false,
                            "children": Array [
                              <ForwardRef(WithStyles)
                                value="some id"
                              >
                                some name
                              </ForwardRef(WithStyles)>,
                            ],
                            "classes": Object {
                              "disabled": "Mui-disabled",
                              "filled": "MuiSelect-filled",
                              "icon": "MuiSelect-icon",
                              "iconFilled": "MuiSelect-iconFilled",
                              "iconOpen": "MuiSelect-iconOpen",
                              "iconOutlined": "MuiSelect-iconOutlined",
                              "nativeInput": "MuiSelect-nativeInput",
                              "outlined": "MuiSelect-outlined",
                              "root": "MuiSelect-root",
                              "select": "MuiSelect-select",
                              "selectMenu": "MuiSelect-selectMenu",
                            },
                            "displayEmpty": false,
                            "labelId": undefined,
                            "multiple": false,
                            "onClose": undefined,
                            "onOpen": undefined,
                            "open": undefined,
                            "renderValue": undefined,
                            "type": undefined,
                            "variant": "standard",
                          }
                        }
                        name="size"
                        onChange={[Function]}
                        value="some id"
                      >
                        <ForwardRef(Input)
                          className="makeStyles-lightThemeSelectSizeStyle-10"
                          classes={
                            Object {
                              "colorSecondary": "MuiInput-colorSecondary",
                              "disabled": "Mui-disabled",
                              "error": "Mui-error",
                              "focused": "Mui-focused",
                              "formControl": "MuiInput-formControl",
                              "fullWidth": "MuiInput-fullWidth",
                              "input": "MuiInput-input",
                              "inputMarginDense": "MuiInput-inputMarginDense",
                              "inputMultiline": "MuiInput-inputMultiline",
                              "inputTypeSearch": "MuiInput-inputTypeSearch",
                              "marginDense": "MuiInput-marginDense",
                              "multiline": "MuiInput-multiline",
                              "root": "MuiInput-root",
                              "underline": "MuiInput-underline",
                            }
                          }
                          data-cy="size"
                          disablePortal={true}
                          inputComponent={
                            Object {
                              "$$typeof": Symbol(react.forward_ref),
                              "propTypes": Object {
                                "IconComponent": [Function],
                                "MenuProps": [Function],
                                "SelectDisplayProps": [Function],
                                "aria-label": [Function],
                                "autoFocus": [Function],
                                "autoWidth": [Function],
                                "children": [Function],
                                "className": [Function],
                                "classes": [Function],
                                "defaultValue": [Function],
                                "disabled": [Function],
                                "displayEmpty": [Function],
                                "inputRef": [Function],
                                "labelId": [Function],
                                "multiple": [Function],
                                "name": [Function],
                                "onBlur": [Function],
                                "onChange": [Function],
                                "onClose": [Function],
                                "onFocus": [Function],
                                "onOpen": [Function],
                                "open": [Function],
                                "readOnly": [Function],
                                "renderValue": [Function],
                                "tabIndex": [Function],
                                "type": [Function],
                                "value": [Function],
                                "variant": [Function],
                              },
                              "render": [Function],
                            }
                          }
                          inputProps={
                            Object {
                              "IconComponent": Object {
                                "$$typeof": Symbol(react.memo),
                                "compare": null,
                                "type": Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "render": [Function],
                                },
                              },
                              "MenuProps": undefined,
                              "SelectDisplayProps": Object {
                                "id": undefined,
                              },
                              "autoWidth": false,
                              "children": Array [
                                <ForwardRef(WithStyles)
                                  value="some id"
                                >
                                  some name
                                </ForwardRef(WithStyles)>,
                              ],
                              "classes": Object {
                                "disabled": "Mui-disabled",
                                "filled": "MuiSelect-filled",
                                "icon": "MuiSelect-icon",
                                "iconFilled": "MuiSelect-iconFilled",
                                "iconOpen": "MuiSelect-iconOpen",
                                "iconOutlined": "MuiSelect-iconOutlined",
                                "nativeInput": "MuiSelect-nativeInput",
                                "outlined": "MuiSelect-outlined",
                                "root": "MuiSelect-root",
                                "select": "MuiSelect-select",
                                "selectMenu": "MuiSelect-selectMenu",
                              },
                              "displayEmpty": false,
                              "labelId": undefined,
                              "multiple": false,
                              "onClose": undefined,
                              "onOpen": undefined,
                              "open": undefined,
                              "renderValue": undefined,
                              "type": undefined,
                              "variant": "standard",
                            }
                          }
                          name="size"
                          onChange={[Function]}
                          value="some id"
                        >
                          <WithStyles(ForwardRef(InputBase))
                            className="makeStyles-lightThemeSelectSizeStyle-10"
                            classes={
                              Object {
                                "colorSecondary": "MuiInput-colorSecondary",
                                "disabled": "Mui-disabled",
                                "error": "Mui-error",
                                "focused": "Mui-focused",
                                "formControl": "MuiInput-formControl",
                                "fullWidth": "MuiInput-fullWidth",
                                "input": "MuiInput-input",
                                "inputMarginDense": "MuiInput-inputMarginDense",
                                "inputMultiline": "MuiInput-inputMultiline",
                                "inputTypeSearch": "MuiInput-inputTypeSearch",
                                "marginDense": "MuiInput-marginDense",
                                "multiline": "MuiInput-multiline",
                                "root": "MuiInput-root MuiInput-underline",
                                "underline": null,
                              }
                            }
                            data-cy="size"
                            disablePortal={true}
                            fullWidth={false}
                            inputComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "propTypes": Object {
                                  "IconComponent": [Function],
                                  "MenuProps": [Function],
                                  "SelectDisplayProps": [Function],
                                  "aria-label": [Function],
                                  "autoFocus": [Function],
                                  "autoWidth": [Function],
                                  "children": [Function],
                                  "className": [Function],
                                  "classes": [Function],
                                  "defaultValue": [Function],
                                  "disabled": [Function],
                                  "displayEmpty": [Function],
                                  "inputRef": [Function],
                                  "labelId": [Function],
                                  "multiple": [Function],
                                  "name": [Function],
                                  "onBlur": [Function],
                                  "onChange": [Function],
                                  "onClose": [Function],
                                  "onFocus": [Function],
                                  "onOpen": [Function],
                                  "open": [Function],
                                  "readOnly": [Function],
                                  "renderValue": [Function],
                                  "tabIndex": [Function],
                                  "type": [Function],
                                  "value": [Function],
                                  "variant": [Function],
                                },
                                "render": [Function],
                              }
                            }
                            inputProps={
                              Object {
                                "IconComponent": Object {
                                  "$$typeof": Symbol(react.memo),
                                  "compare": null,
                                  "type": Object {
                                    "$$typeof": Symbol(react.forward_ref),
                                    "render": [Function],
                                  },
                                },
                                "MenuProps": undefined,
                                "SelectDisplayProps": Object {
                                  "id": undefined,
                                },
                                "autoWidth": false,
                                "children": Array [
                                  <ForwardRef(WithStyles)
                                    value="some id"
                                  >
                                    some name
                                  </ForwardRef(WithStyles)>,
                                ],
                                "classes": Object {
                                  "disabled": "Mui-disabled",
                                  "filled": "MuiSelect-filled",
                                  "icon": "MuiSelect-icon",
                                  "iconFilled": "MuiSelect-iconFilled",
                                  "iconOpen": "MuiSelect-iconOpen",
                                  "iconOutlined": "MuiSelect-iconOutlined",
                                  "nativeInput": "MuiSelect-nativeInput",
                                  "outlined": "MuiSelect-outlined",
                                  "root": "MuiSelect-root",
                                  "select": "MuiSelect-select",
                                  "selectMenu": "MuiSelect-selectMenu",
                                },
                                "displayEmpty": false,
                                "labelId": undefined,
                                "multiple": false,
                                "onClose": undefined,
                                "onOpen": undefined,
                                "open": undefined,
                                "renderValue": undefined,
                                "type": undefined,
                                "variant": "standard",
                              }
                            }
                            multiline={false}
                            name="size"
                            onChange={[Function]}
                            type="text"
                            value="some id"
                          >
                            <ForwardRef(InputBase)
                              className="makeStyles-lightThemeSelectSizeStyle-10"
                              classes={
                                Object {
                                  "adornedEnd": "MuiInputBase-adornedEnd",
                                  "adornedStart": "MuiInputBase-adornedStart",
                                  "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                  "disabled": "Mui-disabled Mui-disabled",
                                  "error": "Mui-error Mui-error",
                                  "focused": "Mui-focused Mui-focused",
                                  "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                  "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                  "input": "MuiInputBase-input MuiInput-input",
                                  "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                  "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                  "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                  "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                  "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                  "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                  "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                  "multiline": "MuiInputBase-multiline MuiInput-multiline",
                                  "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                                }
                              }
                              data-cy="size"
                              disablePortal={true}
                              fullWidth={false}
                              inputComponent={
                                Object {
                                  "$$typeof": Symbol(react.forward_ref),
                                  "propTypes": Object {
                                    "IconComponent": [Function],
                                    "MenuProps": [Function],
                                    "SelectDisplayProps": [Function],
                                    "aria-label": [Function],
                                    "autoFocus": [Function],
                                    "autoWidth": [Function],
                                    "children": [Function],
                                    "className": [Function],
                                    "classes": [Function],
                                    "defaultValue": [Function],
                                    "disabled": [Function],
                                    "displayEmpty": [Function],
                                    "inputRef": [Function],
                                    "labelId": [Function],
                                    "multiple": [Function],
                                    "name": [Function],
                                    "onBlur": [Function],
                                    "onChange": [Function],
                                    "onClose": [Function],
                                    "onFocus": [Function],
                                    "onOpen": [Function],
                                    "open": [Function],
                                    "readOnly": [Function],
                                    "renderValue": [Function],
                                    "tabIndex": [Function],
                                    "type": [Function],
                                    "value": [Function],
                                    "variant": [Function],
                                  },
                                  "render": [Function],
                                }
                              }
                              inputProps={
                                Object {
                                  "IconComponent": Object {
                                    "$$typeof": Symbol(react.memo),
                                    "compare": null,
                                    "type": Object {
                                      "$$typeof": Symbol(react.forward_ref),
                                      "render": [Function],
                                    },
                                  },
                                  "MenuProps": undefined,
                                  "SelectDisplayProps": Object {
                                    "id": undefined,
                                  },
                                  "autoWidth": false,
                                  "children": Array [
                                    <ForwardRef(WithStyles)
                                      value="some id"
                                    >
                                      some name
                                    </ForwardRef(WithStyles)>,
                                  ],
                                  "classes": Object {
                                    "disabled": "Mui-disabled",
                                    "filled": "MuiSelect-filled",
                                    "icon": "MuiSelect-icon",
                                    "iconFilled": "MuiSelect-iconFilled",
                                    "iconOpen": "MuiSelect-iconOpen",
                                    "iconOutlined": "MuiSelect-iconOutlined",
                                    "nativeInput": "MuiSelect-nativeInput",
                                    "outlined": "MuiSelect-outlined",
                                    "root": "MuiSelect-root",
                                    "select": "MuiSelect-select",
                                    "selectMenu": "MuiSelect-selectMenu",
                                  },
                                  "displayEmpty": false,
                                  "labelId": undefined,
                                  "multiple": false,
                                  "onClose": undefined,
                                  "onOpen": undefined,
                                  "open": undefined,
                                  "renderValue": undefined,
                                  "type": undefined,
                                  "variant": "standard",
                                }
                              }
                              multiline={false}
                              name="size"
                              onChange={[Function]}
                              type="text"
                              value="some id"
                            >
                              <div
                                className="MuiInputBase-root MuiInput-root MuiInput-underline makeStyles-lightThemeSelectSizeStyle-10"
                                data-cy="size"
                                disablePortal={true}
                                onClick={[Function]}
                              >
                                <ForwardRef(SelectInput)
                                  IconComponent={
                                    Object {
                                      "$$typeof": Symbol(react.memo),
                                      "compare": null,
                                      "type": Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "render": [Function],
                                      },
                                    }
                                  }
                                  SelectDisplayProps={
                                    Object {
                                      "id": undefined,
                                    }
                                  }
                                  autoWidth={false}
                                  className="MuiInputBase-input MuiInput-input"
                                  classes={
                                    Object {
                                      "disabled": "Mui-disabled",
                                      "filled": "MuiSelect-filled",
                                      "icon": "MuiSelect-icon",
                                      "iconFilled": "MuiSelect-iconFilled",
                                      "iconOpen": "MuiSelect-iconOpen",
                                      "iconOutlined": "MuiSelect-iconOutlined",
                                      "nativeInput": "MuiSelect-nativeInput",
                                      "outlined": "MuiSelect-outlined",
                                      "root": "MuiSelect-root",
                                      "select": "MuiSelect-select",
                                      "selectMenu": "MuiSelect-selectMenu",
                                    }
                                  }
                                  displayEmpty={false}
                                  inputRef={[Function]}
                                  multiple={false}
                                  name="size"
                                  onAnimationStart={[Function]}
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  value="some id"
                                  variant="standard"
                                >
                                  <div
                                    aria-haspopup="listbox"
                                    aria-labelledby="mui-component-select-size"
                                    className="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                    id="mui-component-select-size"
                                    onBlur={[Function]}
                                    onFocus={[Function]}
                                    onKeyDown={[Function]}
                                    onMouseDown={[Function]}
                                    role="button"
                                    tabIndex={0}
                                  >
                                    some name
                                  </div>
                                  <input
                                    aria-hidden={true}
                                    className="MuiSelect-nativeInput"
                                    name="size"
                                    onAnimationStart={[Function]}
                                    onChange={[Function]}
                                    tabIndex={-1}
                                    value="some id"
                                  />
                                  <ForwardRef(ArrowDropDownIcon)
                                    className="MuiSelect-icon"
                                  >
                                    <WithStyles(ForwardRef(SvgIcon))
                                      className="MuiSelect-icon"
                                    >
                                      <ForwardRef(SvgIcon)
                                        className="MuiSelect-icon"
                                        classes={
                                          Object {
                                            "colorAction": "MuiSvgIcon-colorAction",
                                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                                            "colorError": "MuiSvgIcon-colorError",
                                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                            "root": "MuiSvgIcon-root",
                                          }
                                        }
                                      >
                                        <svg
                                          aria-hidden={true}
                                          className="MuiSvgIcon-root MuiSelect-icon"
                                          focusable="false"
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M7 10l5 5 5-5z"
                                          />
                                        </svg>
                                      </ForwardRef(SvgIcon)>
                                    </WithStyles(ForwardRef(SvgIcon))>
                                  </ForwardRef(ArrowDropDownIcon)>
                                  <WithStyles(ForwardRef(Menu))
                                    MenuListProps={
                                      Object {
                                        "aria-labelledby": undefined,
                                        "disableListWrap": true,
                                        "role": "listbox",
                                      }
                                    }
                                    PaperProps={
                                      Object {
                                        "style": Object {
                                          "minWidth": undefined,
                                        },
                                      }
                                    }
                                    anchorEl={
                                      <div
                                        aria-haspopup="listbox"
                                        aria-labelledby="mui-component-select-size"
                                        class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                        id="mui-component-select-size"
                                        role="button"
                                        tabindex="0"
                                      >
                                        some name
                                      </div>
                                    }
                                    id="menu-size"
                                    onClose={[Function]}
                                    open={false}
                                  >
                                    <ForwardRef(Menu)
                                      MenuListProps={
                                        Object {
                                          "aria-labelledby": undefined,
                                          "disableListWrap": true,
                                          "role": "listbox",
                                        }
                                      }
                                      PaperProps={
                                        Object {
                                          "style": Object {
                                            "minWidth": undefined,
                                          },
                                        }
                                      }
                                      anchorEl={
                                        <div
                                          aria-haspopup="listbox"
                                          aria-labelledby="mui-component-select-size"
                                          class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                          id="mui-component-select-size"
                                          role="button"
                                          tabindex="0"
                                        >
                                          some name
                                        </div>
                                      }
                                      classes={
                                        Object {
                                          "list": "MuiMenu-list",
                                          "paper": "MuiMenu-paper",
                                        }
                                      }
                                      id="menu-size"
                                      onClose={[Function]}
                                      open={false}
                                    >
                                      <WithStyles(ForwardRef(Popover))
                                        PaperProps={
                                          Object {
                                            "classes": Object {
                                              "root": "MuiMenu-paper",
                                            },
                                            "style": Object {
                                              "minWidth": undefined,
                                            },
                                          }
                                        }
                                        anchorEl={
                                          <div
                                            aria-haspopup="listbox"
                                            aria-labelledby="mui-component-select-size"
                                            class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                            id="mui-component-select-size"
                                            role="button"
                                            tabindex="0"
                                          >
                                            some name
                                          </div>
                                        }
                                        anchorOrigin={
                                          Object {
                                            "horizontal": "left",
                                            "vertical": "top",
                                          }
                                        }
                                        getContentAnchorEl={[Function]}
                                        id="menu-size"
                                        onClose={[Function]}
                                        onEntering={[Function]}
                                        open={false}
                                        transformOrigin={
                                          Object {
                                            "horizontal": "left",
                                            "vertical": "top",
                                          }
                                        }
                                        transitionDuration="auto"
                                      >
                                        <ForwardRef(Popover)
                                          PaperProps={
                                            Object {
                                              "classes": Object {
                                                "root": "MuiMenu-paper",
                                              },
                                              "style": Object {
                                                "minWidth": undefined,
                                              },
                                            }
                                          }
                                          anchorEl={
                                            <div
                                              aria-haspopup="listbox"
                                              aria-labelledby="mui-component-select-size"
                                              class="MuiSelect-root MuiSelect-select MuiSelect-selectMenu MuiInputBase-input MuiInput-input"
                                              id="mui-component-select-size"
                                              role="button"
                                              tabindex="0"
                                            >
                                              some name
                                            </div>
                                          }
                                          anchorOrigin={
                                            Object {
                                              "horizontal": "left",
                                              "vertical": "top",
                                            }
                                          }
                                          classes={
                                            Object {
                                              "paper": "MuiPopover-paper",
                                              "root": "MuiPopover-root",
                                            }
                                          }
                                          getContentAnchorEl={[Function]}
                                          id="menu-size"
                                          onClose={[Function]}
                                          onEntering={[Function]}
                                          open={false}
                                          transformOrigin={
                                            Object {
                                              "horizontal": "left",
                                              "vertical": "top",
                                            }
                                          }
                                          transitionDuration="auto"
                                        >
                                          <ForwardRef(Modal)
                                            BackdropProps={
                                              Object {
                                                "invisible": true,
                                              }
                                            }
                                            className="MuiPopover-root"
                                            container={<body />}
                                            id="menu-size"
                                            onClose={[Function]}
                                            open={false}
                                          />
                                        </ForwardRef(Popover)>
                                      </WithStyles(ForwardRef(Popover))>
                                    </ForwardRef(Menu)>
                                  </WithStyles(ForwardRef(Menu))>
                                </ForwardRef(SelectInput)>
                              </div>
                            </ForwardRef(InputBase)>
                          </WithStyles(ForwardRef(InputBase))>
                        </ForwardRef(Input)>
                      </WithStyles(ForwardRef(Input))>
                    </ForwardRef(Select)>
                  </WithStyles(ForwardRef(Select))>
                </td>
              </ForwardRef(TableCell)>
            </WithStyles(ForwardRef(TableCell))>
            <WithStyles(ForwardRef(TableCell))
              classes={
                Object {
                  "root": "makeStyles-description-2",
                }
              }
              data-cy="cart-item-description"
            >
              <ForwardRef(TableCell)
                classes={
                  Object {
                    "alignCenter": "MuiTableCell-alignCenter",
                    "alignJustify": "MuiTableCell-alignJustify",
                    "alignLeft": "MuiTableCell-alignLeft",
                    "alignRight": "MuiTableCell-alignRight",
                    "body": "MuiTableCell-body",
                    "footer": "MuiTableCell-footer",
                    "head": "MuiTableCell-head",
                    "paddingCheckbox": "MuiTableCell-paddingCheckbox",
                    "paddingNone": "MuiTableCell-paddingNone",
                    "root": "MuiTableCell-root makeStyles-description-2",
                    "sizeSmall": "MuiTableCell-sizeSmall",
                    "stickyHeader": "MuiTableCell-stickyHeader",
                  }
                }
                data-cy="cart-item-description"
              >
                <td
                  aria-sort={null}
                  className="MuiTableCell-root makeStyles-description-2"
                  data-cy="cart-item-description"
                >
                  <div>
                    <FontAwesomeIcon
                      border={false}
                      className=""
                      fixedWidth={false}
                      flip={null}
                      icon={
                        Object {
                          "icon": Array [
                            384,
                            512,
                            Array [],
                            "f6f2",
                            "M368 240c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16h-41.86c13.41-28.63 13.74-63.33-4.13-94.05C303.34 49.84 267.1 32 229.96 32h-78.82c-24.32 0-47.86 8.53-66.54 24.09L72.83 65.9c-10.18 8.49-11.56 23.62-3.07 33.8l20.49 24.59c8.49 10.19 23.62 11.56 33.81 3.07l11.73-9.78c4.32-3.6 9.77-5.57 15.39-5.57h83.62c11.69 0 21.2 9.52 21.2 21.2 0 5.91-2.48 11.58-6.81 15.58L219.7 176H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h134.37l-34.67 32H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h41.86c-13.41 28.63-13.74 63.33 4.13 94.05C80.66 462.15 116.9 480 154.04 480h78.82c24.32 0 47.86-8.53 66.54-24.09l11.77-9.81c10.18-8.49 11.56-23.62 3.07-33.8l-20.49-24.59c-8.49-10.19-23.62-11.56-33.81-3.07l-11.75 9.8a23.992 23.992 0 0 1-15.36 5.56H149.2c-11.69 0-21.2-9.52-21.2-21.2 0-5.91 2.48-11.58 6.81-15.58L164.3 336H368c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16H233.63l34.67-32H368z",
                          ],
                          "iconName": "hryvnia",
                          "prefix": "fas",
                        }
                      }
                      inverse={false}
                      listItem={false}
                      mask={null}
                      pull={null}
                      pulse={false}
                      rotation={null}
                      size={null}
                      spin={false}
                      swapOpacity={false}
                      symbol={false}
                      title=""
                      transform={null}
                    >
                      <svg
                        aria-hidden="true"
                        className="svg-inline--fa fa-hryvnia fa-w-12 "
                        data-icon="hryvnia"
                        data-prefix="fas"
                        focusable="false"
                        role="img"
                        style={Object {}}
                        viewBox="0 0 384 512"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M368 240c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16h-41.86c13.41-28.63 13.74-63.33-4.13-94.05C303.34 49.84 267.1 32 229.96 32h-78.82c-24.32 0-47.86 8.53-66.54 24.09L72.83 65.9c-10.18 8.49-11.56 23.62-3.07 33.8l20.49 24.59c8.49 10.19 23.62 11.56 33.81 3.07l11.73-9.78c4.32-3.6 9.77-5.57 15.39-5.57h83.62c11.69 0 21.2 9.52 21.2 21.2 0 5.91-2.48 11.58-6.81 15.58L219.7 176H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h134.37l-34.67 32H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h41.86c-13.41 28.63-13.74 63.33 4.13 94.05C80.66 462.15 116.9 480 154.04 480h78.82c24.32 0 47.86-8.53 66.54-24.09l11.77-9.81c10.18-8.49 11.56-23.62 3.07-33.8l-20.49-24.59c-8.49-10.19-23.62-11.56-33.81-3.07l-11.75 9.8a23.992 23.992 0 0 1-15.36 5.56H149.2c-11.69 0-21.2-9.52-21.2-21.2 0-5.91 2.48-11.58 6.81-15.58L164.3 336H368c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16H233.63l34.67-32H368z"
                          fill="currentColor"
                          style={Object {}}
                        />
                      </svg>
                    </FontAwesomeIcon>
                     
                    100
                  </div>
                </td>
              </ForwardRef(TableCell)>
            </WithStyles(ForwardRef(TableCell))>
            <WithStyles(ForwardRef(TableCell))
              className="makeStyles-quantityWrapper-9"
            >
              <ForwardRef(TableCell)
                className="makeStyles-quantityWrapper-9"
                classes={
                  Object {
                    "alignCenter": "MuiTableCell-alignCenter",
                    "alignJustify": "MuiTableCell-alignJustify",
                    "alignLeft": "MuiTableCell-alignLeft",
                    "alignRight": "MuiTableCell-alignRight",
                    "body": "MuiTableCell-body",
                    "footer": "MuiTableCell-footer",
                    "head": "MuiTableCell-head",
                    "paddingCheckbox": "MuiTableCell-paddingCheckbox",
                    "paddingNone": "MuiTableCell-paddingNone",
                    "root": "MuiTableCell-root",
                    "sizeSmall": "MuiTableCell-sizeSmall",
                    "stickyHeader": "MuiTableCell-stickyHeader",
                  }
                }
              >
                <td
                  aria-sort={null}
                  className="MuiTableCell-root makeStyles-quantityWrapper-9"
                >
                  <NumberInput
                    onChangeQuantity={[Function]}
                    quantity={1}
                    setInputValue={[Function]}
                  >
                    <div
                      className="makeStyles-root-17"
                      data-cy="cart-item-quantity"
                    >
                      <WithStyles(ForwardRef(Button))
                        className="makeStyles-button-18"
                        disabled={true}
                        onClick={[Function]}
                      >
                        <ForwardRef(Button)
                          className="makeStyles-button-18"
                          classes={
                            Object {
                              "colorInherit": "MuiButton-colorInherit",
                              "contained": "MuiButton-contained",
                              "containedPrimary": "MuiButton-containedPrimary",
                              "containedSecondary": "MuiButton-containedSecondary",
                              "containedSizeLarge": "MuiButton-containedSizeLarge",
                              "containedSizeSmall": "MuiButton-containedSizeSmall",
                              "disableElevation": "MuiButton-disableElevation",
                              "disabled": "Mui-disabled",
                              "endIcon": "MuiButton-endIcon",
                              "focusVisible": "Mui-focusVisible",
                              "fullWidth": "MuiButton-fullWidth",
                              "iconSizeLarge": "MuiButton-iconSizeLarge",
                              "iconSizeMedium": "MuiButton-iconSizeMedium",
                              "iconSizeSmall": "MuiButton-iconSizeSmall",
                              "label": "MuiButton-label",
                              "outlined": "MuiButton-outlined",
                              "outlinedPrimary": "MuiButton-outlinedPrimary",
                              "outlinedSecondary": "MuiButton-outlinedSecondary",
                              "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                              "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                              "root": "MuiButton-root",
                              "sizeLarge": "MuiButton-sizeLarge",
                              "sizeSmall": "MuiButton-sizeSmall",
                              "startIcon": "MuiButton-startIcon",
                              "text": "MuiButton-text",
                              "textPrimary": "MuiButton-textPrimary",
                              "textSecondary": "MuiButton-textSecondary",
                              "textSizeLarge": "MuiButton-textSizeLarge",
                              "textSizeSmall": "MuiButton-textSizeSmall",
                            }
                          }
                          disabled={true}
                          onClick={[Function]}
                        >
                          <WithStyles(ForwardRef(ButtonBase))
                            className="MuiButton-root MuiButton-text makeStyles-button-18 Mui-disabled"
                            component="button"
                            disabled={true}
                            focusRipple={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                            type="button"
                          >
                            <ForwardRef(ButtonBase)
                              className="MuiButton-root MuiButton-text makeStyles-button-18 Mui-disabled"
                              classes={
                                Object {
                                  "disabled": "Mui-disabled",
                                  "focusVisible": "Mui-focusVisible",
                                  "root": "MuiButtonBase-root",
                                }
                              }
                              component="button"
                              disabled={true}
                              focusRipple={true}
                              focusVisibleClassName="Mui-focusVisible"
                              onClick={[Function]}
                              type="button"
                            >
                              <button
                                className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-button-18 Mui-disabled Mui-disabled"
                                disabled={true}
                                onBlur={[Function]}
                                onClick={[Function]}
                                onDragLeave={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                onMouseDown={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                tabIndex={-1}
                                type="button"
                              >
                                <span
                                  className="MuiButton-label"
                                >
                                  <ForwardRef(RemoveIcon)>
                                    <WithStyles(ForwardRef(SvgIcon))>
                                      <ForwardRef(SvgIcon)
                                        classes={
                                          Object {
                                            "colorAction": "MuiSvgIcon-colorAction",
                                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                                            "colorError": "MuiSvgIcon-colorError",
                                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                            "root": "MuiSvgIcon-root",
                                          }
                                        }
                                      >
                                        <svg
                                          aria-hidden={true}
                                          className="MuiSvgIcon-root"
                                          focusable="false"
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M19 13H5v-2h14v2z"
                                          />
                                        </svg>
                                      </ForwardRef(SvgIcon)>
                                    </WithStyles(ForwardRef(SvgIcon))>
                                  </ForwardRef(RemoveIcon)>
                                </span>
                              </button>
                            </ForwardRef(ButtonBase)>
                          </WithStyles(ForwardRef(ButtonBase))>
                        </ForwardRef(Button)>
                      </WithStyles(ForwardRef(Button))>
                      <WithStyles(ForwardRef(TextField))
                        id="filled-basic"
                        inputProps={
                          Object {
                            "style": Object {
                              "height": "15px",
                              "textAlign": "center",
                              "width": "40px",
                            },
                          }
                        }
                        onChange={[Function]}
                        type="string"
                        value={1}
                        variant="outlined"
                      >
                        <ForwardRef(TextField)
                          classes={
                            Object {
                              "root": "MuiTextField-root",
                            }
                          }
                          id="filled-basic"
                          inputProps={
                            Object {
                              "style": Object {
                                "height": "15px",
                                "textAlign": "center",
                                "width": "40px",
                              },
                            }
                          }
                          onChange={[Function]}
                          type="string"
                          value={1}
                          variant="outlined"
                        >
                          <WithStyles(ForwardRef(FormControl))
                            className="MuiTextField-root"
                            color="primary"
                            disabled={false}
                            error={false}
                            fullWidth={false}
                            required={false}
                            variant="outlined"
                          >
                            <ForwardRef(FormControl)
                              className="MuiTextField-root"
                              classes={
                                Object {
                                  "fullWidth": "MuiFormControl-fullWidth",
                                  "marginDense": "MuiFormControl-marginDense",
                                  "marginNormal": "MuiFormControl-marginNormal",
                                  "root": "MuiFormControl-root",
                                }
                              }
                              color="primary"
                              disabled={false}
                              error={false}
                              fullWidth={false}
                              required={false}
                              variant="outlined"
                            >
                              <div
                                className="MuiFormControl-root MuiTextField-root"
                              >
                                <WithStyles(ForwardRef(OutlinedInput))
                                  autoFocus={false}
                                  fullWidth={false}
                                  id="filled-basic"
                                  inputProps={
                                    Object {
                                      "style": Object {
                                        "height": "15px",
                                        "textAlign": "center",
                                        "width": "40px",
                                      },
                                    }
                                  }
                                  multiline={false}
                                  onChange={[Function]}
                                  type="string"
                                  value={1}
                                >
                                  <ForwardRef(OutlinedInput)
                                    autoFocus={false}
                                    classes={
                                      Object {
                                        "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                        "adornedStart": "MuiOutlinedInput-adornedStart",
                                        "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                        "disabled": "Mui-disabled",
                                        "error": "Mui-error",
                                        "focused": "Mui-focused",
                                        "input": "MuiOutlinedInput-input",
                                        "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                        "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                        "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                        "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                        "marginDense": "MuiOutlinedInput-marginDense",
                                        "multiline": "MuiOutlinedInput-multiline",
                                        "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                        "root": "MuiOutlinedInput-root",
                                      }
                                    }
                                    fullWidth={false}
                                    id="filled-basic"
                                    inputProps={
                                      Object {
                                        "style": Object {
                                          "height": "15px",
                                          "textAlign": "center",
                                          "width": "40px",
                                        },
                                      }
                                    }
                                    multiline={false}
                                    onChange={[Function]}
                                    type="string"
                                    value={1}
                                  >
                                    <WithStyles(ForwardRef(InputBase))
                                      autoFocus={false}
                                      classes={
                                        Object {
                                          "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                          "adornedStart": "MuiOutlinedInput-adornedStart",
                                          "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                          "disabled": "Mui-disabled",
                                          "error": "Mui-error",
                                          "focused": "Mui-focused",
                                          "input": "MuiOutlinedInput-input",
                                          "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                          "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                          "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                          "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                          "marginDense": "MuiOutlinedInput-marginDense",
                                          "multiline": "MuiOutlinedInput-multiline",
                                          "notchedOutline": null,
                                          "root": "MuiOutlinedInput-root",
                                        }
                                      }
                                      fullWidth={false}
                                      id="filled-basic"
                                      inputComponent="input"
                                      inputProps={
                                        Object {
                                          "style": Object {
                                            "height": "15px",
                                            "textAlign": "center",
                                            "width": "40px",
                                          },
                                        }
                                      }
                                      multiline={false}
                                      onChange={[Function]}
                                      renderSuffix={[Function]}
                                      type="string"
                                      value={1}
                                    >
                                      <ForwardRef(InputBase)
                                        autoFocus={false}
                                        classes={
                                          Object {
                                            "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                            "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                            "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                            "disabled": "Mui-disabled Mui-disabled",
                                            "error": "Mui-error Mui-error",
                                            "focused": "Mui-focused Mui-focused",
                                            "formControl": "MuiInputBase-formControl",
                                            "fullWidth": "MuiInputBase-fullWidth",
                                            "input": "MuiInputBase-input MuiOutlinedInput-input",
                                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                            "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                            "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                            "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                            "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                            "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                            "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                            "root": "MuiInputBase-root MuiOutlinedInput-root",
                                          }
                                        }
                                        fullWidth={false}
                                        id="filled-basic"
                                        inputComponent="input"
                                        inputProps={
                                          Object {
                                            "style": Object {
                                              "height": "15px",
                                              "textAlign": "center",
                                              "width": "40px",
                                            },
                                          }
                                        }
                                        multiline={false}
                                        onChange={[Function]}
                                        renderSuffix={[Function]}
                                        type="string"
                                        value={1}
                                      >
                                        <div
                                          className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-formControl"
                                          onClick={[Function]}
                                        >
                                          <input
                                            aria-invalid={false}
                                            autoFocus={false}
                                            className="MuiInputBase-input MuiOutlinedInput-input"
                                            disabled={false}
                                            id="filled-basic"
                                            onAnimationStart={[Function]}
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            required={false}
                                            style={
                                              Object {
                                                "height": "15px",
                                                "textAlign": "center",
                                                "width": "40px",
                                              }
                                            }
                                            type="string"
                                            value={1}
                                          />
                                          <WithStyles(ForwardRef(NotchedOutline))
                                            className="MuiOutlinedInput-notchedOutline"
                                            labelWidth={0}
                                            notched={true}
                                          >
                                            <ForwardRef(NotchedOutline)
                                              className="MuiOutlinedInput-notchedOutline"
                                              classes={
                                                Object {
                                                  "legend": "PrivateNotchedOutline-legend-22",
                                                  "legendLabelled": "PrivateNotchedOutline-legendLabelled-23",
                                                  "legendNotched": "PrivateNotchedOutline-legendNotched-24",
                                                  "root": "PrivateNotchedOutline-root-21",
                                                }
                                              }
                                              labelWidth={0}
                                              notched={true}
                                            >
                                              <fieldset
                                                aria-hidden={true}
                                                className="PrivateNotchedOutline-root-21 MuiOutlinedInput-notchedOutline"
                                                style={
                                                  Object {
                                                    "paddingLeft": 8,
                                                  }
                                                }
                                              >
                                                <legend
                                                  className="PrivateNotchedOutline-legend-22"
                                                  style={
                                                    Object {
                                                      "width": 0.01,
                                                    }
                                                  }
                                                >
                                                  <span
                                                    dangerouslySetInnerHTML={
                                                      Object {
                                                        "__html": "&#8203;",
                                                      }
                                                    }
                                                  />
                                                </legend>
                                              </fieldset>
                                            </ForwardRef(NotchedOutline)>
                                          </WithStyles(ForwardRef(NotchedOutline))>
                                        </div>
                                      </ForwardRef(InputBase)>
                                    </WithStyles(ForwardRef(InputBase))>
                                  </ForwardRef(OutlinedInput)>
                                </WithStyles(ForwardRef(OutlinedInput))>
                              </div>
                            </ForwardRef(FormControl)>
                          </WithStyles(ForwardRef(FormControl))>
                        </ForwardRef(TextField)>
                      </WithStyles(ForwardRef(TextField))>
                      <WithStyles(ForwardRef(Button))
                        className="makeStyles-button-18"
                        disabled={false}
                        onClick={[Function]}
                      >
                        <ForwardRef(Button)
                          className="makeStyles-button-18"
                          classes={
                            Object {
                              "colorInherit": "MuiButton-colorInherit",
                              "contained": "MuiButton-contained",
                              "containedPrimary": "MuiButton-containedPrimary",
                              "containedSecondary": "MuiButton-containedSecondary",
                              "containedSizeLarge": "MuiButton-containedSizeLarge",
                              "containedSizeSmall": "MuiButton-containedSizeSmall",
                              "disableElevation": "MuiButton-disableElevation",
                              "disabled": "Mui-disabled",
                              "endIcon": "MuiButton-endIcon",
                              "focusVisible": "Mui-focusVisible",
                              "fullWidth": "MuiButton-fullWidth",
                              "iconSizeLarge": "MuiButton-iconSizeLarge",
                              "iconSizeMedium": "MuiButton-iconSizeMedium",
                              "iconSizeSmall": "MuiButton-iconSizeSmall",
                              "label": "MuiButton-label",
                              "outlined": "MuiButton-outlined",
                              "outlinedPrimary": "MuiButton-outlinedPrimary",
                              "outlinedSecondary": "MuiButton-outlinedSecondary",
                              "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                              "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                              "root": "MuiButton-root",
                              "sizeLarge": "MuiButton-sizeLarge",
                              "sizeSmall": "MuiButton-sizeSmall",
                              "startIcon": "MuiButton-startIcon",
                              "text": "MuiButton-text",
                              "textPrimary": "MuiButton-textPrimary",
                              "textSecondary": "MuiButton-textSecondary",
                              "textSizeLarge": "MuiButton-textSizeLarge",
                              "textSizeSmall": "MuiButton-textSizeSmall",
                            }
                          }
                          disabled={false}
                          onClick={[Function]}
                        >
                          <WithStyles(ForwardRef(ButtonBase))
                            className="MuiButton-root MuiButton-text makeStyles-button-18"
                            component="button"
                            disabled={false}
                            focusRipple={true}
                            focusVisibleClassName="Mui-focusVisible"
                            onClick={[Function]}
                            type="button"
                          >
                            <ForwardRef(ButtonBase)
                              className="MuiButton-root MuiButton-text makeStyles-button-18"
                              classes={
                                Object {
                                  "disabled": "Mui-disabled",
                                  "focusVisible": "Mui-focusVisible",
                                  "root": "MuiButtonBase-root",
                                }
                              }
                              component="button"
                              disabled={false}
                              focusRipple={true}
                              focusVisibleClassName="Mui-focusVisible"
                              onClick={[Function]}
                              type="button"
                            >
                              <button
                                className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-button-18"
                                disabled={false}
                                onBlur={[Function]}
                                onClick={[Function]}
                                onDragLeave={[Function]}
                                onFocus={[Function]}
                                onKeyDown={[Function]}
                                onKeyUp={[Function]}
                                onMouseDown={[Function]}
                                onMouseLeave={[Function]}
                                onMouseUp={[Function]}
                                onTouchEnd={[Function]}
                                onTouchMove={[Function]}
                                onTouchStart={[Function]}
                                tabIndex={0}
                                type="button"
                              >
                                <span
                                  className="MuiButton-label"
                                >
                                  <ForwardRef(AddIcon)>
                                    <WithStyles(ForwardRef(SvgIcon))>
                                      <ForwardRef(SvgIcon)
                                        classes={
                                          Object {
                                            "colorAction": "MuiSvgIcon-colorAction",
                                            "colorDisabled": "MuiSvgIcon-colorDisabled",
                                            "colorError": "MuiSvgIcon-colorError",
                                            "colorPrimary": "MuiSvgIcon-colorPrimary",
                                            "colorSecondary": "MuiSvgIcon-colorSecondary",
                                            "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                            "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                            "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                            "root": "MuiSvgIcon-root",
                                          }
                                        }
                                      >
                                        <svg
                                          aria-hidden={true}
                                          className="MuiSvgIcon-root"
                                          focusable="false"
                                          viewBox="0 0 24 24"
                                        >
                                          <path
                                            d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"
                                          />
                                        </svg>
                                      </ForwardRef(SvgIcon)>
                                    </WithStyles(ForwardRef(SvgIcon))>
                                  </ForwardRef(AddIcon)>
                                </span>
                                <WithStyles(memo)
                                  center={false}
                                >
                                  <ForwardRef(TouchRipple)
                                    center={false}
                                    classes={
                                      Object {
                                        "child": "MuiTouchRipple-child",
                                        "childLeaving": "MuiTouchRipple-childLeaving",
                                        "childPulsate": "MuiTouchRipple-childPulsate",
                                        "ripple": "MuiTouchRipple-ripple",
                                        "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                        "rippleVisible": "MuiTouchRipple-rippleVisible",
                                        "root": "MuiTouchRipple-root",
                                      }
                                    }
                                  >
                                    <span
                                      className="MuiTouchRipple-root"
                                    >
                                      <TransitionGroup
                                        childFactory={[Function]}
                                        component={null}
                                        exit={true}
                                      />
                                    </span>
                                  </ForwardRef(TouchRipple)>
                                </WithStyles(memo)>
                              </button>
                            </ForwardRef(ButtonBase)>
                          </WithStyles(ForwardRef(ButtonBase))>
                        </ForwardRef(Button)>
                      </WithStyles(ForwardRef(Button))>
                    </div>
                  </NumberInput>
                </td>
              </ForwardRef(TableCell)>
            </WithStyles(ForwardRef(TableCell))>
            <WithStyles(ForwardRef(TableCell))
              classes={
                Object {
                  "root": "makeStyles-price-7",
                }
              }
            >
              <ForwardRef(TableCell)
                classes={
                  Object {
                    "alignCenter": "MuiTableCell-alignCenter",
                    "alignJustify": "MuiTableCell-alignJustify",
                    "alignLeft": "MuiTableCell-alignLeft",
                    "alignRight": "MuiTableCell-alignRight",
                    "body": "MuiTableCell-body",
                    "footer": "MuiTableCell-footer",
                    "head": "MuiTableCell-head",
                    "paddingCheckbox": "MuiTableCell-paddingCheckbox",
                    "paddingNone": "MuiTableCell-paddingNone",
                    "root": "MuiTableCell-root makeStyles-price-7",
                    "sizeSmall": "MuiTableCell-sizeSmall",
                    "stickyHeader": "MuiTableCell-stickyHeader",
                  }
                }
              >
                <td
                  aria-sort={null}
                  className="MuiTableCell-root makeStyles-price-7"
                >
                  <div
                    className="makeStyles-priceWrapper-14"
                  >
                    <div>
                      <FontAwesomeIcon
                        border={false}
                        className=""
                        fixedWidth={false}
                        flip={null}
                        icon={
                          Object {
                            "icon": Array [
                              384,
                              512,
                              Array [],
                              "f6f2",
                              "M368 240c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16h-41.86c13.41-28.63 13.74-63.33-4.13-94.05C303.34 49.84 267.1 32 229.96 32h-78.82c-24.32 0-47.86 8.53-66.54 24.09L72.83 65.9c-10.18 8.49-11.56 23.62-3.07 33.8l20.49 24.59c8.49 10.19 23.62 11.56 33.81 3.07l11.73-9.78c4.32-3.6 9.77-5.57 15.39-5.57h83.62c11.69 0 21.2 9.52 21.2 21.2 0 5.91-2.48 11.58-6.81 15.58L219.7 176H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h134.37l-34.67 32H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h41.86c-13.41 28.63-13.74 63.33 4.13 94.05C80.66 462.15 116.9 480 154.04 480h78.82c24.32 0 47.86-8.53 66.54-24.09l11.77-9.81c10.18-8.49 11.56-23.62 3.07-33.8l-20.49-24.59c-8.49-10.19-23.62-11.56-33.81-3.07l-11.75 9.8a23.992 23.992 0 0 1-15.36 5.56H149.2c-11.69 0-21.2-9.52-21.2-21.2 0-5.91 2.48-11.58 6.81-15.58L164.3 336H368c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16H233.63l34.67-32H368z",
                            ],
                            "iconName": "hryvnia",
                            "prefix": "fas",
                          }
                        }
                        inverse={false}
                        listItem={false}
                        mask={null}
                        pull={null}
                        pulse={false}
                        rotation={null}
                        size={null}
                        spin={false}
                        swapOpacity={false}
                        symbol={false}
                        title=""
                        transform={null}
                      >
                        <svg
                          aria-hidden="true"
                          className="svg-inline--fa fa-hryvnia fa-w-12 "
                          data-icon="hryvnia"
                          data-prefix="fas"
                          focusable="false"
                          role="img"
                          style={Object {}}
                          viewBox="0 0 384 512"
                          xmlns="http://www.w3.org/2000/svg"
                        >
                          <path
                            d="M368 240c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16h-41.86c13.41-28.63 13.74-63.33-4.13-94.05C303.34 49.84 267.1 32 229.96 32h-78.82c-24.32 0-47.86 8.53-66.54 24.09L72.83 65.9c-10.18 8.49-11.56 23.62-3.07 33.8l20.49 24.59c8.49 10.19 23.62 11.56 33.81 3.07l11.73-9.78c4.32-3.6 9.77-5.57 15.39-5.57h83.62c11.69 0 21.2 9.52 21.2 21.2 0 5.91-2.48 11.58-6.81 15.58L219.7 176H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h134.37l-34.67 32H16c-8.84 0-16 7.16-16 16v32c0 8.84 7.16 16 16 16h41.86c-13.41 28.63-13.74 63.33 4.13 94.05C80.66 462.15 116.9 480 154.04 480h78.82c24.32 0 47.86-8.53 66.54-24.09l11.77-9.81c10.18-8.49 11.56-23.62 3.07-33.8l-20.49-24.59c-8.49-10.19-23.62-11.56-33.81-3.07l-11.75 9.8a23.992 23.992 0 0 1-15.36 5.56H149.2c-11.69 0-21.2-9.52-21.2-21.2 0-5.91 2.48-11.58 6.81-15.58L164.3 336H368c8.84 0 16-7.16 16-16v-32c0-8.84-7.16-16-16-16H233.63l34.67-32H368z"
                            fill="currentColor"
                            style={Object {}}
                          />
                        </svg>
                      </FontAwesomeIcon>
                       
                      100
                    </div>
                  </div>
                </td>
              </ForwardRef(TableCell)>
            </WithStyles(ForwardRef(TableCell))>
            <WithStyles(ForwardRef(TableCell))
              classes={
                Object {
                  "root": "makeStyles-delete-16",
                }
              }
            >
              <ForwardRef(TableCell)
                classes={
                  Object {
                    "alignCenter": "MuiTableCell-alignCenter",
                    "alignJustify": "MuiTableCell-alignJustify",
                    "alignLeft": "MuiTableCell-alignLeft",
                    "alignRight": "MuiTableCell-alignRight",
                    "body": "MuiTableCell-body",
                    "footer": "MuiTableCell-footer",
                    "head": "MuiTableCell-head",
                    "paddingCheckbox": "MuiTableCell-paddingCheckbox",
                    "paddingNone": "MuiTableCell-paddingNone",
                    "root": "MuiTableCell-root makeStyles-delete-16",
                    "sizeSmall": "MuiTableCell-sizeSmall",
                    "stickyHeader": "MuiTableCell-stickyHeader",
                  }
                }
              >
                <td
                  aria-sort={null}
                  className="MuiTableCell-root makeStyles-delete-16"
                >
                  <span
                    className="makeStyles-deleteIcon-13"
                  >
                    <ForwardRef(DeleteIcon)
                      fontSize="default"
                      onClick={[Function]}
                    >
                      <WithStyles(ForwardRef(SvgIcon))
                        fontSize="default"
                        onClick={[Function]}
                      >
                        <ForwardRef(SvgIcon)
                          classes={
                            Object {
                              "colorAction": "MuiSvgIcon-colorAction",
                              "colorDisabled": "MuiSvgIcon-colorDisabled",
                              "colorError": "MuiSvgIcon-colorError",
                              "colorPrimary": "MuiSvgIcon-colorPrimary",
                              "colorSecondary": "MuiSvgIcon-colorSecondary",
                              "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                              "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                              "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                              "root": "MuiSvgIcon-root",
                            }
                          }
                          fontSize="default"
                          onClick={[Function]}
                        >
                          <svg
                            aria-hidden={true}
                            className="MuiSvgIcon-root"
                            focusable="false"
                            onClick={[Function]}
                            viewBox="0 0 24 24"
                          >
                            <path
                              d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"
                            />
                          </svg>
                        </ForwardRef(SvgIcon)>
                      </WithStyles(ForwardRef(SvgIcon))>
                    </ForwardRef(DeleteIcon)>
                  </span>
                </td>
              </ForwardRef(TableCell)>
            </WithStyles(ForwardRef(TableCell))>
          </tr>
        </ForwardRef(TableRow)>
      </WithStyles(ForwardRef(TableRow))>
    </CartItem>
  </Router>
</BrowserRouter>
`;
