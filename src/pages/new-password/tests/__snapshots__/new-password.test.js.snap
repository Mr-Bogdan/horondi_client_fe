// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Should render 404 page 1`] = `
<BrowserRouter>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "createHref": [Function],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <ThemeProvider
      theme={
        Object {
          "breakpoints": Object {
            "between": [Function],
            "down": [Function],
            "keys": Array [
              "xs",
              "sm",
              "md",
              "lg",
              "xl",
            ],
            "only": [Function],
            "up": [Function],
            "values": Object {
              "lg": 1280,
              "md": 960,
              "sm": 600,
              "xl": 1920,
              "xs": 0,
            },
            "width": [Function],
          },
          "direction": "ltr",
          "mixins": Object {
            "gutters": [Function],
            "toolbar": Object {
              "@media (min-width:0px) and (orientation: landscape)": Object {
                "minHeight": 48,
              },
              "@media (min-width:600px)": Object {
                "minHeight": 64,
              },
              "minHeight": 56,
            },
          },
          "overrides": Object {},
          "palette": Object {
            "action": Object {
              "activatedOpacity": 0.12,
              "active": "rgba(0, 0, 0, 0.54)",
              "disabled": "rgba(0, 0, 0, 0.26)",
              "disabledBackground": "rgba(0, 0, 0, 0.12)",
              "disabledOpacity": 0.38,
              "focus": "rgba(0, 0, 0, 0.12)",
              "focusOpacity": 0.12,
              "hover": "rgba(0, 0, 0, 0.04)",
              "hoverOpacity": 0.04,
              "selected": "rgba(0, 0, 0, 0.08)",
              "selectedOpacity": 0.08,
            },
            "augmentColor": [Function],
            "background": Object {
              "default": "#fafafa",
              "paper": "#fff",
            },
            "backgroundColor": "#FFFFFF",
            "black": "#000000",
            "button": Object {
              "disabled": Object {
                "backgroundColor": "#999999",
                "color": "#C2C2C2",
              },
              "hover": Object {
                "backgroundColor": "#000000",
                "color": "#FFFFFF",
              },
              "normal": Object {
                "backgroundColor": "#3F3F3F",
                "color": "#FFFFFF",
              },
            },
            "card": Object {
              "backgroundColor": "#F5F5F5",
              "border": "1px solid #D3D3D3",
              "childrenBackgroundColor": "#FFFFFF",
              "selectedButton": Object {
                "backgroundColor": "#000000",
                "color": "#FFFFFF",
              },
            },
            "common": Object {
              "black": "#000",
              "white": "#fff",
            },
            "contrastThreshold": 3,
            "divider": "rgba(0, 0, 0, 0.12)",
            "error": Object {
              "contrastText": "#FFFFFF",
              "dark": "#b71c1c",
              "light": "#ef5350",
              "main": "#e53935",
            },
            "getContrastText": [Function],
            "grey": Object {
              "100": "#f5f5f5",
              "200": "#eeeeee",
              "300": "#e0e0e0",
              "400": "#bdbdbd",
              "50": "#fafafa",
              "500": "#9e9e9e",
              "600": "#757575",
              "700": "#616161",
              "800": "#424242",
              "900": "#212121",
              "A100": "#d5d5d5",
              "A200": "#aaaaaa",
              "A400": "#303030",
              "A700": "#616161",
            },
            "icon": "#546e7a",
            "info": Object {
              "contrastText": "#FFFFFF",
              "dark": "#0d47a1",
              "light": "#42a5f5",
              "main": "#1e88e5",
            },
            "primary": Object {
              "contrastText": "#FFFFFF",
              "dark": "#212121",
              "light": "#212121",
              "main": "#212121",
            },
            "secondary": Object {
              "contrastText": "#FFFFFF",
              "dark": "#0d47a1",
              "light": "#2979ff",
              "main": "#2979ff",
            },
            "success": Object {
              "contrastText": "#FFFFFF",
              "dark": "#1b5e20",
              "light": "#66bb6a",
              "main": "#43a047",
            },
            "text": Object {
              "disabled": "rgba(0, 0, 0, 0.38)",
              "hint": "rgba(0, 0, 0, 0.38)",
              "primary": "rgba(0, 0, 0, 0.87)",
              "secondary": "rgba(0, 0, 0, 0.54)",
            },
            "textColor": "#000000",
            "tonalOffset": 0.2,
            "type": "light",
            "warning": Object {
              "contrastText": "#FFFFFF",
              "dark": "#e65100",
              "light": "#ffa726",
              "main": "#fb8c00",
            },
            "white": "#FFFFFF",
          },
          "props": Object {},
          "shadows": Array [
            "none",
            "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
            "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
            "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
            "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
            "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
            "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
            "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
            "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
            "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
            "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
            "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
            "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
            "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
            "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
            "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
            "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
            "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
            "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
            "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
            "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
            "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
          ],
          "shape": Object {
            "borderRadius": 4,
          },
          "spacing": [Function],
          "transitions": Object {
            "create": [Function],
            "duration": Object {
              "complex": 375,
              "enteringScreen": 225,
              "leavingScreen": 195,
              "short": 250,
              "shorter": 200,
              "shortest": 150,
              "standard": 300,
            },
            "easing": Object {
              "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
              "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
              "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
              "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
            },
            "getAutoHeightDuration": [Function],
          },
          "typography": Object {
            "body1": Object {
              "fontFamily": "Montserrat,-apple-system,Arial,sans-serif",
              "fontSize": "1rem",
              "fontWeight": 400,
              "lineHeight": 1.5,
            },
            "body2": Object {
              "fontFamily": "Montserrat,-apple-system,Arial,sans-serif",
              "fontSize": "0.875rem",
              "fontWeight": 400,
              "lineHeight": 1.43,
            },
            "button": Object {
              "fontFamily": "Montserrat,-apple-system,Arial,sans-serif",
              "fontSize": "16px",
              "fontWeight": 500,
              "lineHeight": 1.75,
              "textTransform": "uppercase",
            },
            "caption": Object {
              "fontFamily": "Montserrat,-apple-system,Arial,sans-serif",
              "fontSize": "11px",
              "fontWeight": 400,
              "letterSpacing": "0.33px",
              "lineHeight": "13px",
            },
            "fontFamily": "Montserrat,-apple-system,Arial,sans-serif",
            "fontSize": 14,
            "fontWeightBold": 700,
            "fontWeightLight": 300,
            "fontWeightMedium": 500,
            "fontWeightRegular": 400,
            "h1": Object {
              "fontFamily": "Montserrat,-apple-system,Arial,sans-serif",
              "fontSize": "35px",
              "fontWeight": 500,
              "letterSpacing": "-0.24px",
              "lineHeight": "40px",
            },
            "h2": Object {
              "fontFamily": "Montserrat,-apple-system,Arial,sans-serif",
              "fontSize": "29px",
              "fontWeight": 500,
              "letterSpacing": "-0.24px",
              "lineHeight": "32px",
            },
            "h3": Object {
              "fontFamily": "Montserrat,-apple-system,Arial,sans-serif",
              "fontSize": "24px",
              "fontWeight": 500,
              "letterSpacing": "-0.06px",
              "lineHeight": "28px",
            },
            "h4": Object {
              "fontFamily": "Montserrat,-apple-system,Arial,sans-serif",
              "fontSize": "20px",
              "fontWeight": 500,
              "letterSpacing": "-0.06px",
              "lineHeight": "24px",
            },
            "h5": Object {
              "fontFamily": "Montserrat,-apple-system,Arial,sans-serif",
              "fontSize": "16px",
              "fontWeight": 500,
              "letterSpacing": "-0.05px",
              "lineHeight": "20px",
            },
            "h6": Object {
              "fontFamily": "Montserrat,-apple-system,Arial,sans-serif",
              "fontSize": "14px",
              "fontWeight": 500,
              "letterSpacing": "-0.05px",
              "lineHeight": "20px",
            },
            "htmlFontSize": 16,
            "overline": Object {
              "fontFamily": "Montserrat,-apple-system,Arial,sans-serif",
              "fontSize": "11px",
              "fontWeight": 500,
              "letterSpacing": "0.33px",
              "lineHeight": "13px",
              "textTransform": "uppercase",
            },
            "pxToRem": [Function],
            "round": [Function],
            "subtitle1": Object {
              "fontFamily": "Montserrat,-apple-system,Arial,sans-serif",
              "fontSize": "16px",
              "fontWeight": 400,
              "letterSpacing": "-0.05px",
              "lineHeight": "25px",
            },
            "subtitle2": Object {
              "fontFamily": "Montserrat,-apple-system,Arial,sans-serif",
              "fontSize": "14px",
              "fontWeight": 400,
              "letterSpacing": "-0.05px",
              "lineHeight": "21px",
            },
          },
          "zIndex": Object {
            "appBar": 1100,
            "drawer": 1200,
            "mobileStepper": 1000,
            "modal": 1300,
            "snackbar": 1400,
            "speedDial": 1050,
            "tooltip": 1500,
          },
          Symbol(mui.nested): false,
        }
      }
    >
      <NewPassword>
        <Formik
          initialValues={
            Object {
              "confirmPassword": "",
              "password": "",
            }
          }
          onSubmit={[Function]}
          validateOnBlur={false}
          validateOnChange={false}
          validationSchema={
            ObjectSchema {
              "_blacklist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "_conditions": Array [],
              "_defaultDefault": [Function],
              "_deps": Array [],
              "_excludedEdges": Array [],
              "_exclusive": Object {},
              "_mutate": undefined,
              "_nodes": Array [
                "password",
                "confirmPassword",
              ],
              "_options": Object {
                "abortEarly": true,
                "recursive": true,
              },
              "_type": "object",
              "_typeError": [Function],
              "_whitelist": RefSet {
                "list": Set {},
                "refs": Map {},
              },
              "fields": Object {
                "confirmPassword": StringSchema {
                  "_blacklist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_conditions": Array [
                    Condition {
                      "fn": [Function],
                      "refs": Array [
                        Reference {
                          "getter": [Function],
                          "isContext": false,
                          "isSibling": true,
                          "isValue": false,
                          "key": "password",
                          "map": undefined,
                          "path": "password",
                        },
                      ],
                    },
                  ],
                  "_deps": Array [
                    "password",
                  ],
                  "_exclusive": Object {},
                  "_mutate": undefined,
                  "_options": Object {
                    "abortEarly": true,
                    "recursive": true,
                  },
                  "_type": "string",
                  "_typeError": [Function],
                  "_whitelist": RefSet {
                    "list": Set {},
                    "refs": Map {
                      "password" => Reference {
                        "getter": [Function],
                        "isContext": false,
                        "isSibling": true,
                        "isValue": false,
                        "key": "password",
                        "map": undefined,
                        "path": "password",
                      },
                    },
                  },
                  "_whitelistError": [Function],
                  "tests": Array [],
                  "transforms": Array [
                    [Function],
                  ],
                  "type": "string",
                },
                "password": StringSchema {
                  "_blacklist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "_conditions": Array [],
                  "_deps": Array [],
                  "_exclusive": Object {
                    "matches": false,
                    "required": true,
                  },
                  "_mutate": undefined,
                  "_options": Object {
                    "abortEarly": true,
                    "recursive": true,
                  },
                  "_type": "string",
                  "_typeError": [Function],
                  "_whitelist": RefSet {
                    "list": Set {},
                    "refs": Map {},
                  },
                  "tests": Array [
                    [Function],
                    [Function],
                  ],
                  "transforms": Array [
                    [Function],
                  ],
                  "type": "string",
                },
              },
              "tests": Array [],
              "transforms": Array [
                [Function],
              ],
              "type": "object",
            }
          }
        >
          <div
            className="makeStyles-newPassBackground-1"
          >
            <div
              className="makeStyles-newPassForm-2"
            >
              <Form
                className="newPasswordForm"
              >
                <form
                  action="#"
                  className="newPasswordForm"
                  onReset={[Function]}
                  onSubmit={[Function]}
                >
                  <h2
                    className="makeStyles-heading-3"
                  >
                    newPassword.change.new
                  </h2>
                  <Field
                    InputProps={
                      Object {
                        "endAdornment": <ForwardRef(WithStyles)
                          position="end"
                        >
                          <ForwardRef(WithStyles)
                            aria-label="toggle password visibility"
                            onClick={[Function]}
                          >
                            <UNDEFINED />
                          </ForwardRef(WithStyles)>
                        </ForwardRef(WithStyles)>,
                      }
                    }
                    as={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "Naked": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "propTypes": Object {
                            "FormHelperTextProps": [Function],
                            "InputLabelProps": [Function],
                            "InputProps": [Function],
                            "SelectProps": [Function],
                            "autoComplete": [Function],
                            "autoFocus": [Function],
                            "children": [Function],
                            "className": [Function],
                            "classes": [Function],
                            "color": [Function],
                            "defaultValue": [Function],
                            "disabled": [Function],
                            "error": [Function],
                            "fullWidth": [Function],
                            "helperText": [Function],
                            "hiddenLabel": [Function],
                            "id": [Function],
                            "inputProps": [Function],
                            "inputRef": [Function],
                            "label": [Function],
                            "margin": [Function],
                            "multiline": [Function],
                            "name": [Function],
                            "onBlur": [Function],
                            "onChange": [Function],
                            "onFocus": [Function],
                            "placeholder": [Function],
                            "required": [Function],
                            "rows": [Function],
                            "rowsMax": [Function],
                            "select": [Function],
                            "size": [Function],
                            "type": [Function],
                            "value": [Function],
                            "variant": [Function],
                          },
                          "render": [Function],
                        },
                        "displayName": "WithStyles(ForwardRef(TextField))",
                        "options": Object {
                          "defaultTheme": Object {
                            "breakpoints": Object {
                              "between": [Function],
                              "down": [Function],
                              "keys": Array [
                                "xs",
                                "sm",
                                "md",
                                "lg",
                                "xl",
                              ],
                              "only": [Function],
                              "up": [Function],
                              "values": Object {
                                "lg": 1280,
                                "md": 960,
                                "sm": 600,
                                "xl": 1920,
                                "xs": 0,
                              },
                              "width": [Function],
                            },
                            "direction": "ltr",
                            "mixins": Object {
                              "gutters": [Function],
                              "toolbar": Object {
                                "@media (min-width:0px) and (orientation: landscape)": Object {
                                  "minHeight": 48,
                                },
                                "@media (min-width:600px)": Object {
                                  "minHeight": 64,
                                },
                                "minHeight": 56,
                              },
                            },
                            "overrides": Object {},
                            "palette": Object {
                              "action": Object {
                                "activatedOpacity": 0.12,
                                "active": "rgba(0, 0, 0, 0.54)",
                                "disabled": "rgba(0, 0, 0, 0.26)",
                                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                "disabledOpacity": 0.38,
                                "focus": "rgba(0, 0, 0, 0.12)",
                                "focusOpacity": 0.12,
                                "hover": "rgba(0, 0, 0, 0.04)",
                                "hoverOpacity": 0.04,
                                "selected": "rgba(0, 0, 0, 0.08)",
                                "selectedOpacity": 0.08,
                              },
                              "augmentColor": [Function],
                              "background": Object {
                                "default": "#fafafa",
                                "paper": "#fff",
                              },
                              "common": Object {
                                "black": "#000",
                                "white": "#fff",
                              },
                              "contrastThreshold": 3,
                              "divider": "rgba(0, 0, 0, 0.12)",
                              "error": Object {
                                "contrastText": "#fff",
                                "dark": "#d32f2f",
                                "light": "#e57373",
                                "main": "#f44336",
                              },
                              "getContrastText": [Function],
                              "grey": Object {
                                "100": "#f5f5f5",
                                "200": "#eeeeee",
                                "300": "#e0e0e0",
                                "400": "#bdbdbd",
                                "50": "#fafafa",
                                "500": "#9e9e9e",
                                "600": "#757575",
                                "700": "#616161",
                                "800": "#424242",
                                "900": "#212121",
                                "A100": "#d5d5d5",
                                "A200": "#aaaaaa",
                                "A400": "#303030",
                                "A700": "#616161",
                              },
                              "info": Object {
                                "contrastText": "#fff",
                                "dark": "#1976d2",
                                "light": "#64b5f6",
                                "main": "#2196f3",
                              },
                              "primary": Object {
                                "contrastText": "#fff",
                                "dark": "#303f9f",
                                "light": "#7986cb",
                                "main": "#3f51b5",
                              },
                              "secondary": Object {
                                "contrastText": "#fff",
                                "dark": "#c51162",
                                "light": "#ff4081",
                                "main": "#f50057",
                              },
                              "success": Object {
                                "contrastText": "rgba(0, 0, 0, 0.87)",
                                "dark": "#388e3c",
                                "light": "#81c784",
                                "main": "#4caf50",
                              },
                              "text": Object {
                                "disabled": "rgba(0, 0, 0, 0.38)",
                                "hint": "rgba(0, 0, 0, 0.38)",
                                "primary": "rgba(0, 0, 0, 0.87)",
                                "secondary": "rgba(0, 0, 0, 0.54)",
                              },
                              "tonalOffset": 0.2,
                              "type": "light",
                              "warning": Object {
                                "contrastText": "rgba(0, 0, 0, 0.87)",
                                "dark": "#f57c00",
                                "light": "#ffb74d",
                                "main": "#ff9800",
                              },
                            },
                            "props": Object {},
                            "shadows": Array [
                              "none",
                              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                            ],
                            "shape": Object {
                              "borderRadius": 4,
                            },
                            "spacing": [Function],
                            "transitions": Object {
                              "create": [Function],
                              "duration": Object {
                                "complex": 375,
                                "enteringScreen": 225,
                                "leavingScreen": 195,
                                "short": 250,
                                "shorter": 200,
                                "shortest": 150,
                                "standard": 300,
                              },
                              "easing": Object {
                                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                              },
                              "getAutoHeightDuration": [Function],
                            },
                            "typography": Object {
                              "body1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.00938em",
                                "lineHeight": 1.5,
                              },
                              "body2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.01071em",
                                "lineHeight": 1.43,
                              },
                              "button": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 500,
                                "letterSpacing": "0.02857em",
                                "lineHeight": 1.75,
                                "textTransform": "uppercase",
                              },
                              "caption": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.75rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.03333em",
                                "lineHeight": 1.66,
                              },
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": 14,
                              "fontWeightBold": 700,
                              "fontWeightLight": 300,
                              "fontWeightMedium": 500,
                              "fontWeightRegular": 400,
                              "h1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "6rem",
                                "fontWeight": 300,
                                "letterSpacing": "-0.01562em",
                                "lineHeight": 1.167,
                              },
                              "h2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "3.75rem",
                                "fontWeight": 300,
                                "letterSpacing": "-0.00833em",
                                "lineHeight": 1.2,
                              },
                              "h3": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "3rem",
                                "fontWeight": 400,
                                "letterSpacing": "0em",
                                "lineHeight": 1.167,
                              },
                              "h4": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "2.125rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.00735em",
                                "lineHeight": 1.235,
                              },
                              "h5": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1.5rem",
                                "fontWeight": 400,
                                "letterSpacing": "0em",
                                "lineHeight": 1.334,
                              },
                              "h6": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1.25rem",
                                "fontWeight": 500,
                                "letterSpacing": "0.0075em",
                                "lineHeight": 1.6,
                              },
                              "htmlFontSize": 16,
                              "overline": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.75rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.08333em",
                                "lineHeight": 2.66,
                                "textTransform": "uppercase",
                              },
                              "pxToRem": [Function],
                              "round": [Function],
                              "subtitle1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.00938em",
                                "lineHeight": 1.75,
                              },
                              "subtitle2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 500,
                                "letterSpacing": "0.00714em",
                                "lineHeight": 1.57,
                              },
                            },
                            "zIndex": Object {
                              "appBar": 1100,
                              "drawer": 1200,
                              "mobileStepper": 1000,
                              "modal": 1300,
                              "snackbar": 1400,
                              "speedDial": 1050,
                              "tooltip": 1500,
                            },
                          },
                          "name": "MuiTextField",
                        },
                        "propTypes": Object {
                          "classes": [Function],
                          "innerRef": [Function],
                        },
                        "render": [Function],
                        "useStyles": [Function],
                      }
                    }
                    className="makeStyles-passwordInput-4"
                    error={false}
                    fullWidth={true}
                    helperText=""
                    label="newPassword.change.passLabel"
                    name="password"
                    type="password"
                    variant="outlined"
                  >
                    <WithStyles(ForwardRef(TextField))
                      InputProps={
                        Object {
                          "endAdornment": <ForwardRef(WithStyles)
                            position="end"
                          >
                            <ForwardRef(WithStyles)
                              aria-label="toggle password visibility"
                              onClick={[Function]}
                            >
                              <UNDEFINED />
                            </ForwardRef(WithStyles)>
                          </ForwardRef(WithStyles)>,
                        }
                      }
                      className="makeStyles-passwordInput-4"
                      error={false}
                      fullWidth={true}
                      helperText=""
                      label="newPassword.change.passLabel"
                      name="password"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="password"
                      value=""
                      variant="outlined"
                    >
                      <ForwardRef(TextField)
                        InputProps={
                          Object {
                            "endAdornment": <ForwardRef(WithStyles)
                              position="end"
                            >
                              <ForwardRef(WithStyles)
                                aria-label="toggle password visibility"
                                onClick={[Function]}
                              >
                                <UNDEFINED />
                              </ForwardRef(WithStyles)>
                            </ForwardRef(WithStyles)>,
                          }
                        }
                        className="makeStyles-passwordInput-4"
                        classes={
                          Object {
                            "root": "MuiTextField-root",
                          }
                        }
                        error={false}
                        fullWidth={true}
                        helperText=""
                        label="newPassword.change.passLabel"
                        name="password"
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="password"
                        value=""
                        variant="outlined"
                      >
                        <WithStyles(ForwardRef(FormControl))
                          className="MuiTextField-root makeStyles-passwordInput-4"
                          color="primary"
                          disabled={false}
                          error={false}
                          fullWidth={true}
                          required={false}
                          variant="outlined"
                        >
                          <ForwardRef(FormControl)
                            className="MuiTextField-root makeStyles-passwordInput-4"
                            classes={
                              Object {
                                "fullWidth": "MuiFormControl-fullWidth",
                                "marginDense": "MuiFormControl-marginDense",
                                "marginNormal": "MuiFormControl-marginNormal",
                                "root": "MuiFormControl-root",
                              }
                            }
                            color="primary"
                            disabled={false}
                            error={false}
                            fullWidth={true}
                            required={false}
                            variant="outlined"
                          >
                            <div
                              className="MuiFormControl-root MuiTextField-root makeStyles-passwordInput-4 MuiFormControl-fullWidth"
                            >
                              <WithStyles(ForwardRef(InputLabel))>
                                <ForwardRef(InputLabel)
                                  classes={
                                    Object {
                                      "animated": "MuiInputLabel-animated",
                                      "asterisk": "MuiInputLabel-asterisk",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "filled": "MuiInputLabel-filled",
                                      "focused": "Mui-focused",
                                      "formControl": "MuiInputLabel-formControl",
                                      "marginDense": "MuiInputLabel-marginDense",
                                      "outlined": "MuiInputLabel-outlined",
                                      "required": "Mui-required",
                                      "root": "MuiInputLabel-root",
                                      "shrink": "MuiInputLabel-shrink",
                                    }
                                  }
                                >
                                  <WithStyles(ForwardRef(FormLabel))
                                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                    classes={
                                      Object {
                                        "asterisk": "MuiInputLabel-asterisk",
                                        "disabled": "Mui-disabled",
                                        "error": "Mui-error",
                                        "focused": "Mui-focused",
                                        "required": "Mui-required",
                                      }
                                    }
                                    data-shrink={false}
                                  >
                                    <ForwardRef(FormLabel)
                                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                      classes={
                                        Object {
                                          "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                          "colorSecondary": "MuiFormLabel-colorSecondary",
                                          "disabled": "Mui-disabled Mui-disabled",
                                          "error": "Mui-error Mui-error",
                                          "filled": "MuiFormLabel-filled",
                                          "focused": "Mui-focused Mui-focused",
                                          "required": "Mui-required Mui-required",
                                          "root": "MuiFormLabel-root",
                                        }
                                      }
                                      data-shrink={false}
                                    >
                                      <label
                                        className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                        data-shrink={false}
                                      >
                                        newPassword.change.passLabel
                                      </label>
                                    </ForwardRef(FormLabel)>
                                  </WithStyles(ForwardRef(FormLabel))>
                                </ForwardRef(InputLabel)>
                              </WithStyles(ForwardRef(InputLabel))>
                              <WithStyles(ForwardRef(OutlinedInput))
                                autoFocus={false}
                                endAdornment={
                                  <ForwardRef(WithStyles)
                                    position="end"
                                  >
                                    <ForwardRef(WithStyles)
                                      aria-label="toggle password visibility"
                                      onClick={[Function]}
                                    >
                                      <UNDEFINED />
                                    </ForwardRef(WithStyles)>
                                  </ForwardRef(WithStyles)>
                                }
                                fullWidth={true}
                                label={
                                  <React.Fragment>
                                    newPassword.change.passLabel
                                  </React.Fragment>
                                }
                                multiline={false}
                                name="password"
                                onBlur={[Function]}
                                onChange={[Function]}
                                type="password"
                                value=""
                              >
                                <ForwardRef(OutlinedInput)
                                  autoFocus={false}
                                  classes={
                                    Object {
                                      "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                      "adornedStart": "MuiOutlinedInput-adornedStart",
                                      "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "focused": "Mui-focused",
                                      "input": "MuiOutlinedInput-input",
                                      "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                      "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                      "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                      "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                      "marginDense": "MuiOutlinedInput-marginDense",
                                      "multiline": "MuiOutlinedInput-multiline",
                                      "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                      "root": "MuiOutlinedInput-root",
                                    }
                                  }
                                  endAdornment={
                                    <ForwardRef(WithStyles)
                                      position="end"
                                    >
                                      <ForwardRef(WithStyles)
                                        aria-label="toggle password visibility"
                                        onClick={[Function]}
                                      >
                                        <UNDEFINED />
                                      </ForwardRef(WithStyles)>
                                    </ForwardRef(WithStyles)>
                                  }
                                  fullWidth={true}
                                  label={
                                    <React.Fragment>
                                      newPassword.change.passLabel
                                    </React.Fragment>
                                  }
                                  multiline={false}
                                  name="password"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  type="password"
                                  value=""
                                >
                                  <WithStyles(ForwardRef(InputBase))
                                    autoFocus={false}
                                    classes={
                                      Object {
                                        "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                        "adornedStart": "MuiOutlinedInput-adornedStart",
                                        "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                        "disabled": "Mui-disabled",
                                        "error": "Mui-error",
                                        "focused": "Mui-focused",
                                        "input": "MuiOutlinedInput-input",
                                        "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                        "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                        "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                        "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                        "marginDense": "MuiOutlinedInput-marginDense",
                                        "multiline": "MuiOutlinedInput-multiline",
                                        "notchedOutline": null,
                                        "root": "MuiOutlinedInput-root",
                                      }
                                    }
                                    endAdornment={
                                      <ForwardRef(WithStyles)
                                        position="end"
                                      >
                                        <ForwardRef(WithStyles)
                                          aria-label="toggle password visibility"
                                          onClick={[Function]}
                                        >
                                          <UNDEFINED />
                                        </ForwardRef(WithStyles)>
                                      </ForwardRef(WithStyles)>
                                    }
                                    fullWidth={true}
                                    inputComponent="input"
                                    multiline={false}
                                    name="password"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    renderSuffix={[Function]}
                                    type="password"
                                    value=""
                                  >
                                    <ForwardRef(InputBase)
                                      autoFocus={false}
                                      classes={
                                        Object {
                                          "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                          "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                          "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                          "disabled": "Mui-disabled Mui-disabled",
                                          "error": "Mui-error Mui-error",
                                          "focused": "Mui-focused Mui-focused",
                                          "formControl": "MuiInputBase-formControl",
                                          "fullWidth": "MuiInputBase-fullWidth",
                                          "input": "MuiInputBase-input MuiOutlinedInput-input",
                                          "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                          "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                          "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                          "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                          "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                          "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                          "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                          "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                          "root": "MuiInputBase-root MuiOutlinedInput-root",
                                        }
                                      }
                                      endAdornment={
                                        <ForwardRef(WithStyles)
                                          position="end"
                                        >
                                          <ForwardRef(WithStyles)
                                            aria-label="toggle password visibility"
                                            onClick={[Function]}
                                          >
                                            <UNDEFINED />
                                          </ForwardRef(WithStyles)>
                                        </ForwardRef(WithStyles)>
                                      }
                                      fullWidth={true}
                                      inputComponent="input"
                                      multiline={false}
                                      name="password"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      renderSuffix={[Function]}
                                      type="password"
                                      value=""
                                    >
                                      <div
                                        className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd"
                                        onClick={[Function]}
                                      >
                                        <input
                                          aria-invalid={false}
                                          autoFocus={false}
                                          className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                          disabled={false}
                                          name="password"
                                          onAnimationStart={[Function]}
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          required={false}
                                          type="password"
                                          value=""
                                        />
                                        <WithStyles(ForwardRef(InputAdornment))
                                          position="end"
                                        >
                                          <ForwardRef(InputAdornment)
                                            classes={
                                              Object {
                                                "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                                "filled": "MuiInputAdornment-filled",
                                                "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                                "marginDense": "MuiInputAdornment-marginDense",
                                                "positionEnd": "MuiInputAdornment-positionEnd",
                                                "positionStart": "MuiInputAdornment-positionStart",
                                                "root": "MuiInputAdornment-root",
                                              }
                                            }
                                            position="end"
                                          >
                                            <div
                                              className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                            >
                                              <WithStyles(ForwardRef(IconButton))
                                                aria-label="toggle password visibility"
                                                onClick={[Function]}
                                              >
                                                <ForwardRef(IconButton)
                                                  aria-label="toggle password visibility"
                                                  classes={
                                                    Object {
                                                      "colorInherit": "MuiIconButton-colorInherit",
                                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                                      "disabled": "Mui-disabled",
                                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                                      "edgeStart": "MuiIconButton-edgeStart",
                                                      "label": "MuiIconButton-label",
                                                      "root": "MuiIconButton-root",
                                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                                    }
                                                  }
                                                  onClick={[Function]}
                                                >
                                                  <WithStyles(ForwardRef(ButtonBase))
                                                    aria-label="toggle password visibility"
                                                    centerRipple={true}
                                                    className="MuiIconButton-root"
                                                    disabled={false}
                                                    focusRipple={true}
                                                    onClick={[Function]}
                                                  >
                                                    <ForwardRef(ButtonBase)
                                                      aria-label="toggle password visibility"
                                                      centerRipple={true}
                                                      className="MuiIconButton-root"
                                                      classes={
                                                        Object {
                                                          "disabled": "Mui-disabled",
                                                          "focusVisible": "Mui-focusVisible",
                                                          "root": "MuiButtonBase-root",
                                                        }
                                                      }
                                                      disabled={false}
                                                      focusRipple={true}
                                                      onClick={[Function]}
                                                    >
                                                      <button
                                                        aria-label="toggle password visibility"
                                                        className="MuiButtonBase-root MuiIconButton-root"
                                                        disabled={false}
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onDragLeave={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        onMouseDown={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseUp={[Function]}
                                                        onTouchEnd={[Function]}
                                                        onTouchMove={[Function]}
                                                        onTouchStart={[Function]}
                                                        tabIndex={0}
                                                        type="button"
                                                      >
                                                        <span
                                                          className="MuiIconButton-label"
                                                        >
                                                          <ForwardRef(VisibilityOffIcon)>
                                                            <WithStyles(ForwardRef(SvgIcon))>
                                                              <ForwardRef(SvgIcon)
                                                                classes={
                                                                  Object {
                                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                    "colorError": "MuiSvgIcon-colorError",
                                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                    "root": "MuiSvgIcon-root",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden={true}
                                                                  className="MuiSvgIcon-root"
                                                                  focusable="false"
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <path
                                                                    d="M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"
                                                                  />
                                                                </svg>
                                                              </ForwardRef(SvgIcon)>
                                                            </WithStyles(ForwardRef(SvgIcon))>
                                                          </ForwardRef(VisibilityOffIcon)>
                                                        </span>
                                                        <WithStyles(memo)
                                                          center={true}
                                                        >
                                                          <ForwardRef(TouchRipple)
                                                            center={true}
                                                            classes={
                                                              Object {
                                                                "child": "MuiTouchRipple-child",
                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                "ripple": "MuiTouchRipple-ripple",
                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                "root": "MuiTouchRipple-root",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              className="MuiTouchRipple-root"
                                                            >
                                                              <TransitionGroup
                                                                childFactory={[Function]}
                                                                component={null}
                                                                exit={true}
                                                              />
                                                            </span>
                                                          </ForwardRef(TouchRipple)>
                                                        </WithStyles(memo)>
                                                      </button>
                                                    </ForwardRef(ButtonBase)>
                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                </ForwardRef(IconButton)>
                                              </WithStyles(ForwardRef(IconButton))>
                                            </div>
                                          </ForwardRef(InputAdornment)>
                                        </WithStyles(ForwardRef(InputAdornment))>
                                        <WithStyles(ForwardRef(NotchedOutline))
                                          className="MuiOutlinedInput-notchedOutline"
                                          label={
                                            <React.Fragment>
                                              newPassword.change.passLabel
                                            </React.Fragment>
                                          }
                                          labelWidth={0}
                                          notched={false}
                                        >
                                          <ForwardRef(NotchedOutline)
                                            className="MuiOutlinedInput-notchedOutline"
                                            classes={
                                              Object {
                                                "legend": "PrivateNotchedOutline-legend-8",
                                                "legendLabelled": "PrivateNotchedOutline-legendLabelled-9",
                                                "legendNotched": "PrivateNotchedOutline-legendNotched-10",
                                                "root": "PrivateNotchedOutline-root-7",
                                              }
                                            }
                                            label={
                                              <React.Fragment>
                                                newPassword.change.passLabel
                                              </React.Fragment>
                                            }
                                            labelWidth={0}
                                            notched={false}
                                          >
                                            <fieldset
                                              aria-hidden={true}
                                              className="PrivateNotchedOutline-root-7 MuiOutlinedInput-notchedOutline"
                                            >
                                              <legend
                                                className="PrivateNotchedOutline-legendLabelled-9"
                                              >
                                                <span>
                                                  newPassword.change.passLabel
                                                </span>
                                              </legend>
                                            </fieldset>
                                          </ForwardRef(NotchedOutline)>
                                        </WithStyles(ForwardRef(NotchedOutline))>
                                      </div>
                                    </ForwardRef(InputBase)>
                                  </WithStyles(ForwardRef(InputBase))>
                                </ForwardRef(OutlinedInput)>
                              </WithStyles(ForwardRef(OutlinedInput))>
                            </div>
                          </ForwardRef(FormControl)>
                        </WithStyles(ForwardRef(FormControl))>
                      </ForwardRef(TextField)>
                    </WithStyles(ForwardRef(TextField))>
                  </Field>
                  <Field
                    InputProps={
                      Object {
                        "endAdornment": <ForwardRef(WithStyles)
                          position="end"
                        >
                          <ForwardRef(WithStyles)
                            aria-label="toggle password visibility"
                            onClick={[Function]}
                          >
                            <UNDEFINED />
                          </ForwardRef(WithStyles)>
                        </ForwardRef(WithStyles)>,
                      }
                    }
                    as={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "Naked": Object {
                          "$$typeof": Symbol(react.forward_ref),
                          "propTypes": Object {
                            "FormHelperTextProps": [Function],
                            "InputLabelProps": [Function],
                            "InputProps": [Function],
                            "SelectProps": [Function],
                            "autoComplete": [Function],
                            "autoFocus": [Function],
                            "children": [Function],
                            "className": [Function],
                            "classes": [Function],
                            "color": [Function],
                            "defaultValue": [Function],
                            "disabled": [Function],
                            "error": [Function],
                            "fullWidth": [Function],
                            "helperText": [Function],
                            "hiddenLabel": [Function],
                            "id": [Function],
                            "inputProps": [Function],
                            "inputRef": [Function],
                            "label": [Function],
                            "margin": [Function],
                            "multiline": [Function],
                            "name": [Function],
                            "onBlur": [Function],
                            "onChange": [Function],
                            "onFocus": [Function],
                            "placeholder": [Function],
                            "required": [Function],
                            "rows": [Function],
                            "rowsMax": [Function],
                            "select": [Function],
                            "size": [Function],
                            "type": [Function],
                            "value": [Function],
                            "variant": [Function],
                          },
                          "render": [Function],
                        },
                        "displayName": "WithStyles(ForwardRef(TextField))",
                        "options": Object {
                          "defaultTheme": Object {
                            "breakpoints": Object {
                              "between": [Function],
                              "down": [Function],
                              "keys": Array [
                                "xs",
                                "sm",
                                "md",
                                "lg",
                                "xl",
                              ],
                              "only": [Function],
                              "up": [Function],
                              "values": Object {
                                "lg": 1280,
                                "md": 960,
                                "sm": 600,
                                "xl": 1920,
                                "xs": 0,
                              },
                              "width": [Function],
                            },
                            "direction": "ltr",
                            "mixins": Object {
                              "gutters": [Function],
                              "toolbar": Object {
                                "@media (min-width:0px) and (orientation: landscape)": Object {
                                  "minHeight": 48,
                                },
                                "@media (min-width:600px)": Object {
                                  "minHeight": 64,
                                },
                                "minHeight": 56,
                              },
                            },
                            "overrides": Object {},
                            "palette": Object {
                              "action": Object {
                                "activatedOpacity": 0.12,
                                "active": "rgba(0, 0, 0, 0.54)",
                                "disabled": "rgba(0, 0, 0, 0.26)",
                                "disabledBackground": "rgba(0, 0, 0, 0.12)",
                                "disabledOpacity": 0.38,
                                "focus": "rgba(0, 0, 0, 0.12)",
                                "focusOpacity": 0.12,
                                "hover": "rgba(0, 0, 0, 0.04)",
                                "hoverOpacity": 0.04,
                                "selected": "rgba(0, 0, 0, 0.08)",
                                "selectedOpacity": 0.08,
                              },
                              "augmentColor": [Function],
                              "background": Object {
                                "default": "#fafafa",
                                "paper": "#fff",
                              },
                              "common": Object {
                                "black": "#000",
                                "white": "#fff",
                              },
                              "contrastThreshold": 3,
                              "divider": "rgba(0, 0, 0, 0.12)",
                              "error": Object {
                                "contrastText": "#fff",
                                "dark": "#d32f2f",
                                "light": "#e57373",
                                "main": "#f44336",
                              },
                              "getContrastText": [Function],
                              "grey": Object {
                                "100": "#f5f5f5",
                                "200": "#eeeeee",
                                "300": "#e0e0e0",
                                "400": "#bdbdbd",
                                "50": "#fafafa",
                                "500": "#9e9e9e",
                                "600": "#757575",
                                "700": "#616161",
                                "800": "#424242",
                                "900": "#212121",
                                "A100": "#d5d5d5",
                                "A200": "#aaaaaa",
                                "A400": "#303030",
                                "A700": "#616161",
                              },
                              "info": Object {
                                "contrastText": "#fff",
                                "dark": "#1976d2",
                                "light": "#64b5f6",
                                "main": "#2196f3",
                              },
                              "primary": Object {
                                "contrastText": "#fff",
                                "dark": "#303f9f",
                                "light": "#7986cb",
                                "main": "#3f51b5",
                              },
                              "secondary": Object {
                                "contrastText": "#fff",
                                "dark": "#c51162",
                                "light": "#ff4081",
                                "main": "#f50057",
                              },
                              "success": Object {
                                "contrastText": "rgba(0, 0, 0, 0.87)",
                                "dark": "#388e3c",
                                "light": "#81c784",
                                "main": "#4caf50",
                              },
                              "text": Object {
                                "disabled": "rgba(0, 0, 0, 0.38)",
                                "hint": "rgba(0, 0, 0, 0.38)",
                                "primary": "rgba(0, 0, 0, 0.87)",
                                "secondary": "rgba(0, 0, 0, 0.54)",
                              },
                              "tonalOffset": 0.2,
                              "type": "light",
                              "warning": Object {
                                "contrastText": "rgba(0, 0, 0, 0.87)",
                                "dark": "#f57c00",
                                "light": "#ffb74d",
                                "main": "#ff9800",
                              },
                            },
                            "props": Object {},
                            "shadows": Array [
                              "none",
                              "0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)",
                              "0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)",
                              "0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)",
                              "0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)",
                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)",
                              "0px 3px 5px -1px rgba(0,0,0,0.2),0px 6px 10px 0px rgba(0,0,0,0.14),0px 1px 18px 0px rgba(0,0,0,0.12)",
                              "0px 4px 5px -2px rgba(0,0,0,0.2),0px 7px 10px 1px rgba(0,0,0,0.14),0px 2px 16px 1px rgba(0,0,0,0.12)",
                              "0px 5px 5px -3px rgba(0,0,0,0.2),0px 8px 10px 1px rgba(0,0,0,0.14),0px 3px 14px 2px rgba(0,0,0,0.12)",
                              "0px 5px 6px -3px rgba(0,0,0,0.2),0px 9px 12px 1px rgba(0,0,0,0.14),0px 3px 16px 2px rgba(0,0,0,0.12)",
                              "0px 6px 6px -3px rgba(0,0,0,0.2),0px 10px 14px 1px rgba(0,0,0,0.14),0px 4px 18px 3px rgba(0,0,0,0.12)",
                              "0px 6px 7px -4px rgba(0,0,0,0.2),0px 11px 15px 1px rgba(0,0,0,0.14),0px 4px 20px 3px rgba(0,0,0,0.12)",
                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 12px 17px 2px rgba(0,0,0,0.14),0px 5px 22px 4px rgba(0,0,0,0.12)",
                              "0px 7px 8px -4px rgba(0,0,0,0.2),0px 13px 19px 2px rgba(0,0,0,0.14),0px 5px 24px 4px rgba(0,0,0,0.12)",
                              "0px 7px 9px -4px rgba(0,0,0,0.2),0px 14px 21px 2px rgba(0,0,0,0.14),0px 5px 26px 4px rgba(0,0,0,0.12)",
                              "0px 8px 9px -5px rgba(0,0,0,0.2),0px 15px 22px 2px rgba(0,0,0,0.14),0px 6px 28px 5px rgba(0,0,0,0.12)",
                              "0px 8px 10px -5px rgba(0,0,0,0.2),0px 16px 24px 2px rgba(0,0,0,0.14),0px 6px 30px 5px rgba(0,0,0,0.12)",
                              "0px 8px 11px -5px rgba(0,0,0,0.2),0px 17px 26px 2px rgba(0,0,0,0.14),0px 6px 32px 5px rgba(0,0,0,0.12)",
                              "0px 9px 11px -5px rgba(0,0,0,0.2),0px 18px 28px 2px rgba(0,0,0,0.14),0px 7px 34px 6px rgba(0,0,0,0.12)",
                              "0px 9px 12px -6px rgba(0,0,0,0.2),0px 19px 29px 2px rgba(0,0,0,0.14),0px 7px 36px 6px rgba(0,0,0,0.12)",
                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 20px 31px 3px rgba(0,0,0,0.14),0px 8px 38px 7px rgba(0,0,0,0.12)",
                              "0px 10px 13px -6px rgba(0,0,0,0.2),0px 21px 33px 3px rgba(0,0,0,0.14),0px 8px 40px 7px rgba(0,0,0,0.12)",
                              "0px 10px 14px -6px rgba(0,0,0,0.2),0px 22px 35px 3px rgba(0,0,0,0.14),0px 8px 42px 7px rgba(0,0,0,0.12)",
                              "0px 11px 14px -7px rgba(0,0,0,0.2),0px 23px 36px 3px rgba(0,0,0,0.14),0px 9px 44px 8px rgba(0,0,0,0.12)",
                              "0px 11px 15px -7px rgba(0,0,0,0.2),0px 24px 38px 3px rgba(0,0,0,0.14),0px 9px 46px 8px rgba(0,0,0,0.12)",
                            ],
                            "shape": Object {
                              "borderRadius": 4,
                            },
                            "spacing": [Function],
                            "transitions": Object {
                              "create": [Function],
                              "duration": Object {
                                "complex": 375,
                                "enteringScreen": 225,
                                "leavingScreen": 195,
                                "short": 250,
                                "shorter": 200,
                                "shortest": 150,
                                "standard": 300,
                              },
                              "easing": Object {
                                "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                                "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                                "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                                "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                              },
                              "getAutoHeightDuration": [Function],
                            },
                            "typography": Object {
                              "body1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.00938em",
                                "lineHeight": 1.5,
                              },
                              "body2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.01071em",
                                "lineHeight": 1.43,
                              },
                              "button": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 500,
                                "letterSpacing": "0.02857em",
                                "lineHeight": 1.75,
                                "textTransform": "uppercase",
                              },
                              "caption": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.75rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.03333em",
                                "lineHeight": 1.66,
                              },
                              "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                              "fontSize": 14,
                              "fontWeightBold": 700,
                              "fontWeightLight": 300,
                              "fontWeightMedium": 500,
                              "fontWeightRegular": 400,
                              "h1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "6rem",
                                "fontWeight": 300,
                                "letterSpacing": "-0.01562em",
                                "lineHeight": 1.167,
                              },
                              "h2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "3.75rem",
                                "fontWeight": 300,
                                "letterSpacing": "-0.00833em",
                                "lineHeight": 1.2,
                              },
                              "h3": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "3rem",
                                "fontWeight": 400,
                                "letterSpacing": "0em",
                                "lineHeight": 1.167,
                              },
                              "h4": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "2.125rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.00735em",
                                "lineHeight": 1.235,
                              },
                              "h5": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1.5rem",
                                "fontWeight": 400,
                                "letterSpacing": "0em",
                                "lineHeight": 1.334,
                              },
                              "h6": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1.25rem",
                                "fontWeight": 500,
                                "letterSpacing": "0.0075em",
                                "lineHeight": 1.6,
                              },
                              "htmlFontSize": 16,
                              "overline": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.75rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.08333em",
                                "lineHeight": 2.66,
                                "textTransform": "uppercase",
                              },
                              "pxToRem": [Function],
                              "round": [Function],
                              "subtitle1": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "1rem",
                                "fontWeight": 400,
                                "letterSpacing": "0.00938em",
                                "lineHeight": 1.75,
                              },
                              "subtitle2": Object {
                                "fontFamily": "\\"Roboto\\", \\"Helvetica\\", \\"Arial\\", sans-serif",
                                "fontSize": "0.875rem",
                                "fontWeight": 500,
                                "letterSpacing": "0.00714em",
                                "lineHeight": 1.57,
                              },
                            },
                            "zIndex": Object {
                              "appBar": 1100,
                              "drawer": 1200,
                              "mobileStepper": 1000,
                              "modal": 1300,
                              "snackbar": 1400,
                              "speedDial": 1050,
                              "tooltip": 1500,
                            },
                          },
                          "name": "MuiTextField",
                        },
                        "propTypes": Object {
                          "classes": [Function],
                          "innerRef": [Function],
                        },
                        "render": [Function],
                        "useStyles": [Function],
                      }
                    }
                    className="makeStyles-passwordInput-4"
                    error={false}
                    fullWidth={true}
                    helperText=""
                    label="newPassword.change.confirmLabel"
                    name="confirmPassword"
                    type="password"
                    variant="outlined"
                  >
                    <WithStyles(ForwardRef(TextField))
                      InputProps={
                        Object {
                          "endAdornment": <ForwardRef(WithStyles)
                            position="end"
                          >
                            <ForwardRef(WithStyles)
                              aria-label="toggle password visibility"
                              onClick={[Function]}
                            >
                              <UNDEFINED />
                            </ForwardRef(WithStyles)>
                          </ForwardRef(WithStyles)>,
                        }
                      }
                      className="makeStyles-passwordInput-4"
                      error={false}
                      fullWidth={true}
                      helperText=""
                      label="newPassword.change.confirmLabel"
                      name="confirmPassword"
                      onBlur={[Function]}
                      onChange={[Function]}
                      type="password"
                      value=""
                      variant="outlined"
                    >
                      <ForwardRef(TextField)
                        InputProps={
                          Object {
                            "endAdornment": <ForwardRef(WithStyles)
                              position="end"
                            >
                              <ForwardRef(WithStyles)
                                aria-label="toggle password visibility"
                                onClick={[Function]}
                              >
                                <UNDEFINED />
                              </ForwardRef(WithStyles)>
                            </ForwardRef(WithStyles)>,
                          }
                        }
                        className="makeStyles-passwordInput-4"
                        classes={
                          Object {
                            "root": "MuiTextField-root",
                          }
                        }
                        error={false}
                        fullWidth={true}
                        helperText=""
                        label="newPassword.change.confirmLabel"
                        name="confirmPassword"
                        onBlur={[Function]}
                        onChange={[Function]}
                        type="password"
                        value=""
                        variant="outlined"
                      >
                        <WithStyles(ForwardRef(FormControl))
                          className="MuiTextField-root makeStyles-passwordInput-4"
                          color="primary"
                          disabled={false}
                          error={false}
                          fullWidth={true}
                          required={false}
                          variant="outlined"
                        >
                          <ForwardRef(FormControl)
                            className="MuiTextField-root makeStyles-passwordInput-4"
                            classes={
                              Object {
                                "fullWidth": "MuiFormControl-fullWidth",
                                "marginDense": "MuiFormControl-marginDense",
                                "marginNormal": "MuiFormControl-marginNormal",
                                "root": "MuiFormControl-root",
                              }
                            }
                            color="primary"
                            disabled={false}
                            error={false}
                            fullWidth={true}
                            required={false}
                            variant="outlined"
                          >
                            <div
                              className="MuiFormControl-root MuiTextField-root makeStyles-passwordInput-4 MuiFormControl-fullWidth"
                            >
                              <WithStyles(ForwardRef(InputLabel))>
                                <ForwardRef(InputLabel)
                                  classes={
                                    Object {
                                      "animated": "MuiInputLabel-animated",
                                      "asterisk": "MuiInputLabel-asterisk",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "filled": "MuiInputLabel-filled",
                                      "focused": "Mui-focused",
                                      "formControl": "MuiInputLabel-formControl",
                                      "marginDense": "MuiInputLabel-marginDense",
                                      "outlined": "MuiInputLabel-outlined",
                                      "required": "Mui-required",
                                      "root": "MuiInputLabel-root",
                                      "shrink": "MuiInputLabel-shrink",
                                    }
                                  }
                                >
                                  <WithStyles(ForwardRef(FormLabel))
                                    className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                    classes={
                                      Object {
                                        "asterisk": "MuiInputLabel-asterisk",
                                        "disabled": "Mui-disabled",
                                        "error": "Mui-error",
                                        "focused": "Mui-focused",
                                        "required": "Mui-required",
                                      }
                                    }
                                    data-shrink={false}
                                  >
                                    <ForwardRef(FormLabel)
                                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                      classes={
                                        Object {
                                          "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                          "colorSecondary": "MuiFormLabel-colorSecondary",
                                          "disabled": "Mui-disabled Mui-disabled",
                                          "error": "Mui-error Mui-error",
                                          "filled": "MuiFormLabel-filled",
                                          "focused": "Mui-focused Mui-focused",
                                          "required": "Mui-required Mui-required",
                                          "root": "MuiFormLabel-root",
                                        }
                                      }
                                      data-shrink={false}
                                    >
                                      <label
                                        className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                        data-shrink={false}
                                      >
                                        newPassword.change.confirmLabel
                                      </label>
                                    </ForwardRef(FormLabel)>
                                  </WithStyles(ForwardRef(FormLabel))>
                                </ForwardRef(InputLabel)>
                              </WithStyles(ForwardRef(InputLabel))>
                              <WithStyles(ForwardRef(OutlinedInput))
                                autoFocus={false}
                                endAdornment={
                                  <ForwardRef(WithStyles)
                                    position="end"
                                  >
                                    <ForwardRef(WithStyles)
                                      aria-label="toggle password visibility"
                                      onClick={[Function]}
                                    >
                                      <UNDEFINED />
                                    </ForwardRef(WithStyles)>
                                  </ForwardRef(WithStyles)>
                                }
                                fullWidth={true}
                                label={
                                  <React.Fragment>
                                    newPassword.change.confirmLabel
                                  </React.Fragment>
                                }
                                multiline={false}
                                name="confirmPassword"
                                onBlur={[Function]}
                                onChange={[Function]}
                                type="password"
                                value=""
                              >
                                <ForwardRef(OutlinedInput)
                                  autoFocus={false}
                                  classes={
                                    Object {
                                      "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                      "adornedStart": "MuiOutlinedInput-adornedStart",
                                      "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                      "disabled": "Mui-disabled",
                                      "error": "Mui-error",
                                      "focused": "Mui-focused",
                                      "input": "MuiOutlinedInput-input",
                                      "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                      "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                      "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                      "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                      "marginDense": "MuiOutlinedInput-marginDense",
                                      "multiline": "MuiOutlinedInput-multiline",
                                      "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                      "root": "MuiOutlinedInput-root",
                                    }
                                  }
                                  endAdornment={
                                    <ForwardRef(WithStyles)
                                      position="end"
                                    >
                                      <ForwardRef(WithStyles)
                                        aria-label="toggle password visibility"
                                        onClick={[Function]}
                                      >
                                        <UNDEFINED />
                                      </ForwardRef(WithStyles)>
                                    </ForwardRef(WithStyles)>
                                  }
                                  fullWidth={true}
                                  label={
                                    <React.Fragment>
                                      newPassword.change.confirmLabel
                                    </React.Fragment>
                                  }
                                  multiline={false}
                                  name="confirmPassword"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  type="password"
                                  value=""
                                >
                                  <WithStyles(ForwardRef(InputBase))
                                    autoFocus={false}
                                    classes={
                                      Object {
                                        "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                        "adornedStart": "MuiOutlinedInput-adornedStart",
                                        "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                        "disabled": "Mui-disabled",
                                        "error": "Mui-error",
                                        "focused": "Mui-focused",
                                        "input": "MuiOutlinedInput-input",
                                        "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                        "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                        "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                        "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                        "marginDense": "MuiOutlinedInput-marginDense",
                                        "multiline": "MuiOutlinedInput-multiline",
                                        "notchedOutline": null,
                                        "root": "MuiOutlinedInput-root",
                                      }
                                    }
                                    endAdornment={
                                      <ForwardRef(WithStyles)
                                        position="end"
                                      >
                                        <ForwardRef(WithStyles)
                                          aria-label="toggle password visibility"
                                          onClick={[Function]}
                                        >
                                          <UNDEFINED />
                                        </ForwardRef(WithStyles)>
                                      </ForwardRef(WithStyles)>
                                    }
                                    fullWidth={true}
                                    inputComponent="input"
                                    multiline={false}
                                    name="confirmPassword"
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    renderSuffix={[Function]}
                                    type="password"
                                    value=""
                                  >
                                    <ForwardRef(InputBase)
                                      autoFocus={false}
                                      classes={
                                        Object {
                                          "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                          "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                          "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                          "disabled": "Mui-disabled Mui-disabled",
                                          "error": "Mui-error Mui-error",
                                          "focused": "Mui-focused Mui-focused",
                                          "formControl": "MuiInputBase-formControl",
                                          "fullWidth": "MuiInputBase-fullWidth",
                                          "input": "MuiInputBase-input MuiOutlinedInput-input",
                                          "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                          "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                          "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                          "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                          "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                          "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                          "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                          "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                          "root": "MuiInputBase-root MuiOutlinedInput-root",
                                        }
                                      }
                                      endAdornment={
                                        <ForwardRef(WithStyles)
                                          position="end"
                                        >
                                          <ForwardRef(WithStyles)
                                            aria-label="toggle password visibility"
                                            onClick={[Function]}
                                          >
                                            <UNDEFINED />
                                          </ForwardRef(WithStyles)>
                                        </ForwardRef(WithStyles)>
                                      }
                                      fullWidth={true}
                                      inputComponent="input"
                                      multiline={false}
                                      name="confirmPassword"
                                      onBlur={[Function]}
                                      onChange={[Function]}
                                      renderSuffix={[Function]}
                                      type="password"
                                      value=""
                                    >
                                      <div
                                        className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd"
                                        onClick={[Function]}
                                      >
                                        <input
                                          aria-invalid={false}
                                          autoFocus={false}
                                          className="MuiInputBase-input MuiOutlinedInput-input MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd"
                                          disabled={false}
                                          name="confirmPassword"
                                          onAnimationStart={[Function]}
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          required={false}
                                          type="password"
                                          value=""
                                        />
                                        <WithStyles(ForwardRef(InputAdornment))
                                          position="end"
                                        >
                                          <ForwardRef(InputAdornment)
                                            classes={
                                              Object {
                                                "disablePointerEvents": "MuiInputAdornment-disablePointerEvents",
                                                "filled": "MuiInputAdornment-filled",
                                                "hiddenLabel": "MuiInputAdornment-hiddenLabel",
                                                "marginDense": "MuiInputAdornment-marginDense",
                                                "positionEnd": "MuiInputAdornment-positionEnd",
                                                "positionStart": "MuiInputAdornment-positionStart",
                                                "root": "MuiInputAdornment-root",
                                              }
                                            }
                                            position="end"
                                          >
                                            <div
                                              className="MuiInputAdornment-root MuiInputAdornment-positionEnd"
                                            >
                                              <WithStyles(ForwardRef(IconButton))
                                                aria-label="toggle password visibility"
                                                onClick={[Function]}
                                              >
                                                <ForwardRef(IconButton)
                                                  aria-label="toggle password visibility"
                                                  classes={
                                                    Object {
                                                      "colorInherit": "MuiIconButton-colorInherit",
                                                      "colorPrimary": "MuiIconButton-colorPrimary",
                                                      "colorSecondary": "MuiIconButton-colorSecondary",
                                                      "disabled": "Mui-disabled",
                                                      "edgeEnd": "MuiIconButton-edgeEnd",
                                                      "edgeStart": "MuiIconButton-edgeStart",
                                                      "label": "MuiIconButton-label",
                                                      "root": "MuiIconButton-root",
                                                      "sizeSmall": "MuiIconButton-sizeSmall",
                                                    }
                                                  }
                                                  onClick={[Function]}
                                                >
                                                  <WithStyles(ForwardRef(ButtonBase))
                                                    aria-label="toggle password visibility"
                                                    centerRipple={true}
                                                    className="MuiIconButton-root"
                                                    disabled={false}
                                                    focusRipple={true}
                                                    onClick={[Function]}
                                                  >
                                                    <ForwardRef(ButtonBase)
                                                      aria-label="toggle password visibility"
                                                      centerRipple={true}
                                                      className="MuiIconButton-root"
                                                      classes={
                                                        Object {
                                                          "disabled": "Mui-disabled",
                                                          "focusVisible": "Mui-focusVisible",
                                                          "root": "MuiButtonBase-root",
                                                        }
                                                      }
                                                      disabled={false}
                                                      focusRipple={true}
                                                      onClick={[Function]}
                                                    >
                                                      <button
                                                        aria-label="toggle password visibility"
                                                        className="MuiButtonBase-root MuiIconButton-root"
                                                        disabled={false}
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onDragLeave={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        onMouseDown={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseUp={[Function]}
                                                        onTouchEnd={[Function]}
                                                        onTouchMove={[Function]}
                                                        onTouchStart={[Function]}
                                                        tabIndex={0}
                                                        type="button"
                                                      >
                                                        <span
                                                          className="MuiIconButton-label"
                                                        >
                                                          <ForwardRef(VisibilityOffIcon)>
                                                            <WithStyles(ForwardRef(SvgIcon))>
                                                              <ForwardRef(SvgIcon)
                                                                classes={
                                                                  Object {
                                                                    "colorAction": "MuiSvgIcon-colorAction",
                                                                    "colorDisabled": "MuiSvgIcon-colorDisabled",
                                                                    "colorError": "MuiSvgIcon-colorError",
                                                                    "colorPrimary": "MuiSvgIcon-colorPrimary",
                                                                    "colorSecondary": "MuiSvgIcon-colorSecondary",
                                                                    "fontSizeInherit": "MuiSvgIcon-fontSizeInherit",
                                                                    "fontSizeLarge": "MuiSvgIcon-fontSizeLarge",
                                                                    "fontSizeSmall": "MuiSvgIcon-fontSizeSmall",
                                                                    "root": "MuiSvgIcon-root",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden={true}
                                                                  className="MuiSvgIcon-root"
                                                                  focusable="false"
                                                                  viewBox="0 0 24 24"
                                                                >
                                                                  <path
                                                                    d="M12 7c2.76 0 5 2.24 5 5 0 .65-.13 1.26-.36 1.83l2.92 2.92c1.51-1.26 2.7-2.89 3.43-4.75-1.73-4.39-6-7.5-11-7.5-1.4 0-2.74.25-3.98.7l2.16 2.16C10.74 7.13 11.35 7 12 7zM2 4.27l2.28 2.28.46.46C3.08 8.3 1.78 10.02 1 12c1.73 4.39 6 7.5 11 7.5 1.55 0 3.03-.3 4.38-.84l.42.42L19.73 22 21 20.73 3.27 3 2 4.27zM7.53 9.8l1.55 1.55c-.05.21-.08.43-.08.65 0 1.66 1.34 3 3 3 .22 0 .44-.03.65-.08l1.55 1.55c-.67.33-1.41.53-2.2.53-2.76 0-5-2.24-5-5 0-.79.2-1.53.53-2.2zm4.31-.78l3.15 3.15.02-.16c0-1.66-1.34-3-3-3l-.17.01z"
                                                                  />
                                                                </svg>
                                                              </ForwardRef(SvgIcon)>
                                                            </WithStyles(ForwardRef(SvgIcon))>
                                                          </ForwardRef(VisibilityOffIcon)>
                                                        </span>
                                                        <WithStyles(memo)
                                                          center={true}
                                                        >
                                                          <ForwardRef(TouchRipple)
                                                            center={true}
                                                            classes={
                                                              Object {
                                                                "child": "MuiTouchRipple-child",
                                                                "childLeaving": "MuiTouchRipple-childLeaving",
                                                                "childPulsate": "MuiTouchRipple-childPulsate",
                                                                "ripple": "MuiTouchRipple-ripple",
                                                                "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                                                "rippleVisible": "MuiTouchRipple-rippleVisible",
                                                                "root": "MuiTouchRipple-root",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              className="MuiTouchRipple-root"
                                                            >
                                                              <TransitionGroup
                                                                childFactory={[Function]}
                                                                component={null}
                                                                exit={true}
                                                              />
                                                            </span>
                                                          </ForwardRef(TouchRipple)>
                                                        </WithStyles(memo)>
                                                      </button>
                                                    </ForwardRef(ButtonBase)>
                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                </ForwardRef(IconButton)>
                                              </WithStyles(ForwardRef(IconButton))>
                                            </div>
                                          </ForwardRef(InputAdornment)>
                                        </WithStyles(ForwardRef(InputAdornment))>
                                        <WithStyles(ForwardRef(NotchedOutline))
                                          className="MuiOutlinedInput-notchedOutline"
                                          label={
                                            <React.Fragment>
                                              newPassword.change.confirmLabel
                                            </React.Fragment>
                                          }
                                          labelWidth={0}
                                          notched={false}
                                        >
                                          <ForwardRef(NotchedOutline)
                                            className="MuiOutlinedInput-notchedOutline"
                                            classes={
                                              Object {
                                                "legend": "PrivateNotchedOutline-legend-8",
                                                "legendLabelled": "PrivateNotchedOutline-legendLabelled-9",
                                                "legendNotched": "PrivateNotchedOutline-legendNotched-10",
                                                "root": "PrivateNotchedOutline-root-7",
                                              }
                                            }
                                            label={
                                              <React.Fragment>
                                                newPassword.change.confirmLabel
                                              </React.Fragment>
                                            }
                                            labelWidth={0}
                                            notched={false}
                                          >
                                            <fieldset
                                              aria-hidden={true}
                                              className="PrivateNotchedOutline-root-7 MuiOutlinedInput-notchedOutline"
                                            >
                                              <legend
                                                className="PrivateNotchedOutline-legendLabelled-9"
                                              >
                                                <span>
                                                  newPassword.change.confirmLabel
                                                </span>
                                              </legend>
                                            </fieldset>
                                          </ForwardRef(NotchedOutline)>
                                        </WithStyles(ForwardRef(NotchedOutline))>
                                      </div>
                                    </ForwardRef(InputBase)>
                                  </WithStyles(ForwardRef(InputBase))>
                                </ForwardRef(OutlinedInput)>
                              </WithStyles(ForwardRef(OutlinedInput))>
                            </div>
                          </ForwardRef(FormControl)>
                        </WithStyles(ForwardRef(FormControl))>
                      </ForwardRef(TextField)>
                    </WithStyles(ForwardRef(TextField))>
                  </Field>
                  <WithStyles(ForwardRef(Button))
                    className="makeStyles-changeBtn-5"
                    fullWidth={true}
                    onClick={[Function]}
                    type="submit"
                  >
                    <ForwardRef(Button)
                      className="makeStyles-changeBtn-5"
                      classes={
                        Object {
                          "colorInherit": "MuiButton-colorInherit",
                          "contained": "MuiButton-contained",
                          "containedPrimary": "MuiButton-containedPrimary",
                          "containedSecondary": "MuiButton-containedSecondary",
                          "containedSizeLarge": "MuiButton-containedSizeLarge",
                          "containedSizeSmall": "MuiButton-containedSizeSmall",
                          "disableElevation": "MuiButton-disableElevation",
                          "disabled": "Mui-disabled",
                          "endIcon": "MuiButton-endIcon",
                          "focusVisible": "Mui-focusVisible",
                          "fullWidth": "MuiButton-fullWidth",
                          "iconSizeLarge": "MuiButton-iconSizeLarge",
                          "iconSizeMedium": "MuiButton-iconSizeMedium",
                          "iconSizeSmall": "MuiButton-iconSizeSmall",
                          "label": "MuiButton-label",
                          "outlined": "MuiButton-outlined",
                          "outlinedPrimary": "MuiButton-outlinedPrimary",
                          "outlinedSecondary": "MuiButton-outlinedSecondary",
                          "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                          "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                          "root": "MuiButton-root",
                          "sizeLarge": "MuiButton-sizeLarge",
                          "sizeSmall": "MuiButton-sizeSmall",
                          "startIcon": "MuiButton-startIcon",
                          "text": "MuiButton-text",
                          "textPrimary": "MuiButton-textPrimary",
                          "textSecondary": "MuiButton-textSecondary",
                          "textSizeLarge": "MuiButton-textSizeLarge",
                          "textSizeSmall": "MuiButton-textSizeSmall",
                        }
                      }
                      fullWidth={true}
                      onClick={[Function]}
                      type="submit"
                    >
                      <WithStyles(ForwardRef(ButtonBase))
                        className="MuiButton-root MuiButton-text makeStyles-changeBtn-5 MuiButton-fullWidth"
                        component="button"
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        onClick={[Function]}
                        type="submit"
                      >
                        <ForwardRef(ButtonBase)
                          className="MuiButton-root MuiButton-text makeStyles-changeBtn-5 MuiButton-fullWidth"
                          classes={
                            Object {
                              "disabled": "Mui-disabled",
                              "focusVisible": "Mui-focusVisible",
                              "root": "MuiButtonBase-root",
                            }
                          }
                          component="button"
                          disabled={false}
                          focusRipple={true}
                          focusVisibleClassName="Mui-focusVisible"
                          onClick={[Function]}
                          type="submit"
                        >
                          <button
                            className="MuiButtonBase-root MuiButton-root MuiButton-text makeStyles-changeBtn-5 MuiButton-fullWidth"
                            disabled={false}
                            onBlur={[Function]}
                            onClick={[Function]}
                            onDragLeave={[Function]}
                            onFocus={[Function]}
                            onKeyDown={[Function]}
                            onKeyUp={[Function]}
                            onMouseDown={[Function]}
                            onMouseLeave={[Function]}
                            onMouseUp={[Function]}
                            onTouchEnd={[Function]}
                            onTouchMove={[Function]}
                            onTouchStart={[Function]}
                            tabIndex={0}
                            type="submit"
                          >
                            <span
                              className="MuiButton-label"
                            >
                              newPassword.change.button
                            </span>
                            <WithStyles(memo)
                              center={false}
                            >
                              <ForwardRef(TouchRipple)
                                center={false}
                                classes={
                                  Object {
                                    "child": "MuiTouchRipple-child",
                                    "childLeaving": "MuiTouchRipple-childLeaving",
                                    "childPulsate": "MuiTouchRipple-childPulsate",
                                    "ripple": "MuiTouchRipple-ripple",
                                    "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                    "rippleVisible": "MuiTouchRipple-rippleVisible",
                                    "root": "MuiTouchRipple-root",
                                  }
                                }
                              >
                                <span
                                  className="MuiTouchRipple-root"
                                >
                                  <TransitionGroup
                                    childFactory={[Function]}
                                    component={null}
                                    exit={true}
                                  />
                                </span>
                              </ForwardRef(TouchRipple)>
                            </WithStyles(memo)>
                          </button>
                        </ForwardRef(ButtonBase)>
                      </WithStyles(ForwardRef(ButtonBase))>
                    </ForwardRef(Button)>
                  </WithStyles(ForwardRef(Button))>
                </form>
              </Form>
            </div>
          </div>
        </Formik>
      </NewPassword>
    </ThemeProvider>
  </Router>
</BrowserRouter>
`;
